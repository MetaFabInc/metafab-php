<?php
/**
 * EcosystemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MetaFab\MetaFab;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MetaFab\ApiException;
use MetaFab\Configuration;
use MetaFab\HeaderSelector;
use MetaFab\ObjectSerializer;

/**
 * EcosystemsApi Class Doc Comment
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EcosystemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'approveEcosystemGame' => [
            'application/json',
        ],
        'authEcosystem' => [
            'application/json',
        ],
        'authProfile' => [
            'application/json',
        ],
        'authProfilePlayer' => [
            'application/json',
        ],
        'createEcosystem' => [
            'application/json',
        ],
        'createProfile' => [
            'application/json',
        ],
        'createProfilePlayer' => [
            'application/json',
        ],
        'getEcosystem' => [
            'application/json',
        ],
        'getEcosystemGame' => [
            'application/json',
        ],
        'getEcosystemGames' => [
            'application/json',
        ],
        'getProfileGame' => [
            'application/json',
        ],
        'getProfileGames' => [
            'application/json',
        ],
        'unapproveEcosystemGame' => [
            'application/json',
        ],
        'updateEcosystem' => [
            'application/json',
        ],
        'updateProfile' => [
            'application/json',
        ],
        'updateProfilePlayer' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approveEcosystemGame
     *
     * Approve ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\ApproveEcosystemGameRequest $approve_ecosystem_game_request approve_ecosystem_game_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function approveEcosystemGame($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, string $contentType = self::contentTypes['approveEcosystemGame'][0])
    {
        $this->approveEcosystemGameWithHttpInfo($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, $contentType);
    }

    /**
     * Operation approveEcosystemGameWithHttpInfo
     *
     * Approve ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\ApproveEcosystemGameRequest $approve_ecosystem_game_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveEcosystemGameWithHttpInfo($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, string $contentType = self::contentTypes['approveEcosystemGame'][0])
    {
        $request = $this->approveEcosystemGameRequest($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveEcosystemGameAsync
     *
     * Approve ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\ApproveEcosystemGameRequest $approve_ecosystem_game_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveEcosystemGameAsync($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, string $contentType = self::contentTypes['approveEcosystemGame'][0])
    {
        return $this->approveEcosystemGameAsyncWithHttpInfo($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveEcosystemGameAsyncWithHttpInfo
     *
     * Approve ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\ApproveEcosystemGameRequest $approve_ecosystem_game_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveEcosystemGameAsyncWithHttpInfo($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, string $contentType = self::contentTypes['approveEcosystemGame'][0])
    {
        $returnType = '';
        $request = $this->approveEcosystemGameRequest($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveEcosystemGame'
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\ApproveEcosystemGameRequest $approve_ecosystem_game_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveEcosystemGameRequest($ecosystem_id, $x_authorization, $approve_ecosystem_game_request, string $contentType = self::contentTypes['approveEcosystemGame'][0])
    {

        // verify the required parameter 'ecosystem_id' is set
        if ($ecosystem_id === null || (is_array($ecosystem_id) && count($ecosystem_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ecosystem_id when calling approveEcosystemGame'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling approveEcosystemGame'
            );
        }

        // verify the required parameter 'approve_ecosystem_game_request' is set
        if ($approve_ecosystem_game_request === null || (is_array($approve_ecosystem_game_request) && count($approve_ecosystem_game_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $approve_ecosystem_game_request when calling approveEcosystemGame'
            );
        }


        $resourcePath = '/v1/ecosystems/{ecosystemId}/games';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($ecosystem_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ecosystemId' . '}',
                ObjectSerializer::toPathValue($ecosystem_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($approve_ecosystem_game_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($approve_ecosystem_game_request));
            } else {
                $httpBody = $approve_ecosystem_game_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authEcosystem
     *
     * Authenticate ecosystem
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\EcosystemModel|string|string
     */
    public function authEcosystem(string $contentType = self::contentTypes['authEcosystem'][0])
    {
        list($response) = $this->authEcosystemWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation authEcosystemWithHttpInfo
     *
     * Authenticate ecosystem
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\EcosystemModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function authEcosystemWithHttpInfo(string $contentType = self::contentTypes['authEcosystem'][0])
    {
        $request = $this->authEcosystemRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\EcosystemModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\EcosystemModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\EcosystemModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\EcosystemModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\EcosystemModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authEcosystemAsync
     *
     * Authenticate ecosystem
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authEcosystemAsync(string $contentType = self::contentTypes['authEcosystem'][0])
    {
        return $this->authEcosystemAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authEcosystemAsyncWithHttpInfo
     *
     * Authenticate ecosystem
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authEcosystemAsyncWithHttpInfo(string $contentType = self::contentTypes['authEcosystem'][0])
    {
        $returnType = '\MetaFab\Model\EcosystemModel';
        $request = $this->authEcosystemRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authEcosystem'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authEcosystemRequest(string $contentType = self::contentTypes['authEcosystem'][0])
    {


        $resourcePath = '/v1/ecosystems/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authProfile
     *
     * Authenticate profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfile'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\AuthProfile200Response|string|string
     */
    public function authProfile($x_ecosystem_key, string $contentType = self::contentTypes['authProfile'][0])
    {
        list($response) = $this->authProfileWithHttpInfo($x_ecosystem_key, $contentType);
        return $response;
    }

    /**
     * Operation authProfileWithHttpInfo
     *
     * Authenticate profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfile'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\AuthProfile200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function authProfileWithHttpInfo($x_ecosystem_key, string $contentType = self::contentTypes['authProfile'][0])
    {
        $request = $this->authProfileRequest($x_ecosystem_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\AuthProfile200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\AuthProfile200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\AuthProfile200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\AuthProfile200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\AuthProfile200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authProfileAsync
     *
     * Authenticate profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authProfileAsync($x_ecosystem_key, string $contentType = self::contentTypes['authProfile'][0])
    {
        return $this->authProfileAsyncWithHttpInfo($x_ecosystem_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authProfileAsyncWithHttpInfo
     *
     * Authenticate profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authProfileAsyncWithHttpInfo($x_ecosystem_key, string $contentType = self::contentTypes['authProfile'][0])
    {
        $returnType = '\MetaFab\Model\AuthProfile200Response';
        $request = $this->authProfileRequest($x_ecosystem_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authProfile'
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authProfileRequest($x_ecosystem_key, string $contentType = self::contentTypes['authProfile'][0])
    {

        // verify the required parameter 'x_ecosystem_key' is set
        if ($x_ecosystem_key === null || (is_array($x_ecosystem_key) && count($x_ecosystem_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ecosystem_key when calling authProfile'
            );
        }


        $resourcePath = '/v1/profiles/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ecosystem_key !== null) {
            $headerParams['X-Ecosystem-Key'] = ObjectSerializer::toHeaderValue($x_ecosystem_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authProfilePlayer
     *
     * Authenticate profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  string $x_username The username of a player. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfilePlayer'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\AuthPlayer200Response|string|string
     */
    public function authProfilePlayer($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, string $contentType = self::contentTypes['authProfilePlayer'][0])
    {
        list($response) = $this->authProfilePlayerWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, $contentType);
        return $response;
    }

    /**
     * Operation authProfilePlayerWithHttpInfo
     *
     * Authenticate profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  string $x_username The username of a player. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfilePlayer'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\AuthPlayer200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function authProfilePlayerWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, string $contentType = self::contentTypes['authProfilePlayer'][0])
    {
        $request = $this->authProfilePlayerRequest($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\AuthPlayer200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\AuthPlayer200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\AuthPlayer200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\AuthPlayer200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\AuthPlayer200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authProfilePlayerAsync
     *
     * Authenticate profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  string $x_username The username of a player. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authProfilePlayerAsync($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, string $contentType = self::contentTypes['authProfilePlayer'][0])
    {
        return $this->authProfilePlayerAsyncWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authProfilePlayerAsyncWithHttpInfo
     *
     * Authenticate profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  string $x_username The username of a player. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authProfilePlayerAsyncWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, string $contentType = self::contentTypes['authProfilePlayer'][0])
    {
        $returnType = '\MetaFab\Model\AuthPlayer200Response';
        $request = $this->authProfilePlayerRequest($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authProfilePlayer'
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  string $x_username The username of a player. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authProfilePlayerRequest($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $x_username, string $contentType = self::contentTypes['authProfilePlayer'][0])
    {

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling authProfilePlayer'
            );
        }

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling authProfilePlayer'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling authProfilePlayer'
            );
        }

        // verify the required parameter 'x_wallet_decrypt_key' is set
        if ($x_wallet_decrypt_key === null || (is_array($x_wallet_decrypt_key) && count($x_wallet_decrypt_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_wallet_decrypt_key when calling authProfilePlayer'
            );
        }

        // verify the required parameter 'x_username' is set
        if ($x_username === null || (is_array($x_username) && count($x_username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_username when calling authProfilePlayer'
            );
        }


        $resourcePath = '/v1/profiles/{profileId}/games/{gameId}/players/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_wallet_decrypt_key !== null) {
            $headerParams['X-Wallet-Decrypt-Key'] = ObjectSerializer::toHeaderValue($x_wallet_decrypt_key);
        }
        // header params
        if ($x_username !== null) {
            $headerParams['X-Username'] = ObjectSerializer::toHeaderValue($x_username);
        }

        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($game_id !== null) {
            $resourcePath = str_replace(
                '{' . 'gameId' . '}',
                ObjectSerializer::toPathValue($game_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEcosystem
     *
     * Create ecosystem
     *
     * @param  \MetaFab\Model\CreateEcosystemRequest $create_ecosystem_request create_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\EcosystemModel|string|string
     */
    public function createEcosystem($create_ecosystem_request, string $contentType = self::contentTypes['createEcosystem'][0])
    {
        list($response) = $this->createEcosystemWithHttpInfo($create_ecosystem_request, $contentType);
        return $response;
    }

    /**
     * Operation createEcosystemWithHttpInfo
     *
     * Create ecosystem
     *
     * @param  \MetaFab\Model\CreateEcosystemRequest $create_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\EcosystemModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEcosystemWithHttpInfo($create_ecosystem_request, string $contentType = self::contentTypes['createEcosystem'][0])
    {
        $request = $this->createEcosystemRequest($create_ecosystem_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\EcosystemModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\EcosystemModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\EcosystemModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\EcosystemModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\EcosystemModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEcosystemAsync
     *
     * Create ecosystem
     *
     * @param  \MetaFab\Model\CreateEcosystemRequest $create_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEcosystemAsync($create_ecosystem_request, string $contentType = self::contentTypes['createEcosystem'][0])
    {
        return $this->createEcosystemAsyncWithHttpInfo($create_ecosystem_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEcosystemAsyncWithHttpInfo
     *
     * Create ecosystem
     *
     * @param  \MetaFab\Model\CreateEcosystemRequest $create_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEcosystemAsyncWithHttpInfo($create_ecosystem_request, string $contentType = self::contentTypes['createEcosystem'][0])
    {
        $returnType = '\MetaFab\Model\EcosystemModel';
        $request = $this->createEcosystemRequest($create_ecosystem_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEcosystem'
     *
     * @param  \MetaFab\Model\CreateEcosystemRequest $create_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEcosystemRequest($create_ecosystem_request, string $contentType = self::contentTypes['createEcosystem'][0])
    {

        // verify the required parameter 'create_ecosystem_request' is set
        if ($create_ecosystem_request === null || (is_array($create_ecosystem_request) && count($create_ecosystem_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_ecosystem_request when calling createEcosystem'
            );
        }


        $resourcePath = '/v1/ecosystems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_ecosystem_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_ecosystem_request));
            } else {
                $httpBody = $create_ecosystem_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProfile
     *
     * Create profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreateProfileRequest $create_profile_request create_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\AuthProfile200Response|string|string
     */
    public function createProfile($x_ecosystem_key, $create_profile_request, string $contentType = self::contentTypes['createProfile'][0])
    {
        list($response) = $this->createProfileWithHttpInfo($x_ecosystem_key, $create_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation createProfileWithHttpInfo
     *
     * Create profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreateProfileRequest $create_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\AuthProfile200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProfileWithHttpInfo($x_ecosystem_key, $create_profile_request, string $contentType = self::contentTypes['createProfile'][0])
    {
        $request = $this->createProfileRequest($x_ecosystem_key, $create_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\AuthProfile200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\AuthProfile200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\AuthProfile200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\AuthProfile200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\AuthProfile200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProfileAsync
     *
     * Create profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreateProfileRequest $create_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProfileAsync($x_ecosystem_key, $create_profile_request, string $contentType = self::contentTypes['createProfile'][0])
    {
        return $this->createProfileAsyncWithHttpInfo($x_ecosystem_key, $create_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProfileAsyncWithHttpInfo
     *
     * Create profile
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreateProfileRequest $create_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProfileAsyncWithHttpInfo($x_ecosystem_key, $create_profile_request, string $contentType = self::contentTypes['createProfile'][0])
    {
        $returnType = '\MetaFab\Model\AuthProfile200Response';
        $request = $this->createProfileRequest($x_ecosystem_key, $create_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProfile'
     *
     * @param  string $x_ecosystem_key The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreateProfileRequest $create_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProfileRequest($x_ecosystem_key, $create_profile_request, string $contentType = self::contentTypes['createProfile'][0])
    {

        // verify the required parameter 'x_ecosystem_key' is set
        if ($x_ecosystem_key === null || (is_array($x_ecosystem_key) && count($x_ecosystem_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ecosystem_key when calling createProfile'
            );
        }

        // verify the required parameter 'create_profile_request' is set
        if ($create_profile_request === null || (is_array($create_profile_request) && count($create_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_profile_request when calling createProfile'
            );
        }


        $resourcePath = '/v1/profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ecosystem_key !== null) {
            $headerParams['X-Ecosystem-Key'] = ObjectSerializer::toHeaderValue($x_ecosystem_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_profile_request));
            } else {
                $httpBody = $create_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProfilePlayer
     *
     * Create profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\CreateProfilePlayerRequest $create_profile_player_request create_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfilePlayer'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\AuthPlayer200Response|string|string
     */
    public function createProfilePlayer($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, string $contentType = self::contentTypes['createProfilePlayer'][0])
    {
        list($response) = $this->createProfilePlayerWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, $contentType);
        return $response;
    }

    /**
     * Operation createProfilePlayerWithHttpInfo
     *
     * Create profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\CreateProfilePlayerRequest $create_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfilePlayer'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\AuthPlayer200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProfilePlayerWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, string $contentType = self::contentTypes['createProfilePlayer'][0])
    {
        $request = $this->createProfilePlayerRequest($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\AuthPlayer200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\AuthPlayer200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\AuthPlayer200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\AuthPlayer200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\AuthPlayer200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProfilePlayerAsync
     *
     * Create profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\CreateProfilePlayerRequest $create_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProfilePlayerAsync($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, string $contentType = self::contentTypes['createProfilePlayer'][0])
    {
        return $this->createProfilePlayerAsyncWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProfilePlayerAsyncWithHttpInfo
     *
     * Create profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\CreateProfilePlayerRequest $create_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProfilePlayerAsyncWithHttpInfo($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, string $contentType = self::contentTypes['createProfilePlayer'][0])
    {
        $returnType = '\MetaFab\Model\AuthPlayer200Response';
        $request = $this->createProfilePlayerRequest($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProfilePlayer'
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\CreateProfilePlayerRequest $create_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProfilePlayerRequest($profile_id, $game_id, $x_authorization, $x_wallet_decrypt_key, $create_profile_player_request, string $contentType = self::contentTypes['createProfilePlayer'][0])
    {

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling createProfilePlayer'
            );
        }

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling createProfilePlayer'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling createProfilePlayer'
            );
        }

        // verify the required parameter 'x_wallet_decrypt_key' is set
        if ($x_wallet_decrypt_key === null || (is_array($x_wallet_decrypt_key) && count($x_wallet_decrypt_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_wallet_decrypt_key when calling createProfilePlayer'
            );
        }

        // verify the required parameter 'create_profile_player_request' is set
        if ($create_profile_player_request === null || (is_array($create_profile_player_request) && count($create_profile_player_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_profile_player_request when calling createProfilePlayer'
            );
        }


        $resourcePath = '/v1/profiles/{profileId}/games/{gameId}/players';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_wallet_decrypt_key !== null) {
            $headerParams['X-Wallet-Decrypt-Key'] = ObjectSerializer::toHeaderValue($x_wallet_decrypt_key);
        }

        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($game_id !== null) {
            $resourcePath = str_replace(
                '{' . 'gameId' . '}',
                ObjectSerializer::toPathValue($game_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_profile_player_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_profile_player_request));
            } else {
                $httpBody = $create_profile_player_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEcosystem
     *
     * Get ecosystem
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\PublicEcosystem|string
     */
    public function getEcosystem($ecosystem_id, string $contentType = self::contentTypes['getEcosystem'][0])
    {
        list($response) = $this->getEcosystemWithHttpInfo($ecosystem_id, $contentType);
        return $response;
    }

    /**
     * Operation getEcosystemWithHttpInfo
     *
     * Get ecosystem
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\PublicEcosystem|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEcosystemWithHttpInfo($ecosystem_id, string $contentType = self::contentTypes['getEcosystem'][0])
    {
        $request = $this->getEcosystemRequest($ecosystem_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\PublicEcosystem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\PublicEcosystem' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\PublicEcosystem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\PublicEcosystem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\PublicEcosystem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEcosystemAsync
     *
     * Get ecosystem
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEcosystemAsync($ecosystem_id, string $contentType = self::contentTypes['getEcosystem'][0])
    {
        return $this->getEcosystemAsyncWithHttpInfo($ecosystem_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEcosystemAsyncWithHttpInfo
     *
     * Get ecosystem
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEcosystemAsyncWithHttpInfo($ecosystem_id, string $contentType = self::contentTypes['getEcosystem'][0])
    {
        $returnType = '\MetaFab\Model\PublicEcosystem';
        $request = $this->getEcosystemRequest($ecosystem_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEcosystem'
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEcosystemRequest($ecosystem_id, string $contentType = self::contentTypes['getEcosystem'][0])
    {

        // verify the required parameter 'ecosystem_id' is set
        if ($ecosystem_id === null || (is_array($ecosystem_id) && count($ecosystem_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ecosystem_id when calling getEcosystem'
            );
        }


        $resourcePath = '/v1/ecosystems/{ecosystemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ecosystem_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ecosystemId' . '}',
                ObjectSerializer::toPathValue($ecosystem_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEcosystemGame
     *
     * Get ecosystem game
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\PublicGame|string
     */
    public function getEcosystemGame($ecosystem_id, $game_id, string $contentType = self::contentTypes['getEcosystemGame'][0])
    {
        list($response) = $this->getEcosystemGameWithHttpInfo($ecosystem_id, $game_id, $contentType);
        return $response;
    }

    /**
     * Operation getEcosystemGameWithHttpInfo
     *
     * Get ecosystem game
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\PublicGame|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEcosystemGameWithHttpInfo($ecosystem_id, $game_id, string $contentType = self::contentTypes['getEcosystemGame'][0])
    {
        $request = $this->getEcosystemGameRequest($ecosystem_id, $game_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\PublicGame' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\PublicGame' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\PublicGame', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\PublicGame';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\PublicGame',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEcosystemGameAsync
     *
     * Get ecosystem game
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEcosystemGameAsync($ecosystem_id, $game_id, string $contentType = self::contentTypes['getEcosystemGame'][0])
    {
        return $this->getEcosystemGameAsyncWithHttpInfo($ecosystem_id, $game_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEcosystemGameAsyncWithHttpInfo
     *
     * Get ecosystem game
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEcosystemGameAsyncWithHttpInfo($ecosystem_id, $game_id, string $contentType = self::contentTypes['getEcosystemGame'][0])
    {
        $returnType = '\MetaFab\Model\PublicGame';
        $request = $this->getEcosystemGameRequest($ecosystem_id, $game_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEcosystemGame'
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEcosystemGameRequest($ecosystem_id, $game_id, string $contentType = self::contentTypes['getEcosystemGame'][0])
    {

        // verify the required parameter 'ecosystem_id' is set
        if ($ecosystem_id === null || (is_array($ecosystem_id) && count($ecosystem_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ecosystem_id when calling getEcosystemGame'
            );
        }

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling getEcosystemGame'
            );
        }


        $resourcePath = '/v1/ecosystems/{ecosystemId}/games/{gameId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ecosystem_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ecosystemId' . '}',
                ObjectSerializer::toPathValue($ecosystem_id),
                $resourcePath
            );
        }
        // path params
        if ($game_id !== null) {
            $resourcePath = str_replace(
                '{' . 'gameId' . '}',
                ObjectSerializer::toPathValue($game_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEcosystemGames
     *
     * Get ecosystem games
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGames'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\PublicGame[]|string
     */
    public function getEcosystemGames($ecosystem_id, string $contentType = self::contentTypes['getEcosystemGames'][0])
    {
        list($response) = $this->getEcosystemGamesWithHttpInfo($ecosystem_id, $contentType);
        return $response;
    }

    /**
     * Operation getEcosystemGamesWithHttpInfo
     *
     * Get ecosystem games
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGames'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\PublicGame[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEcosystemGamesWithHttpInfo($ecosystem_id, string $contentType = self::contentTypes['getEcosystemGames'][0])
    {
        $request = $this->getEcosystemGamesRequest($ecosystem_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\PublicGame[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\PublicGame[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\PublicGame[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\PublicGame[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\PublicGame[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEcosystemGamesAsync
     *
     * Get ecosystem games
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEcosystemGamesAsync($ecosystem_id, string $contentType = self::contentTypes['getEcosystemGames'][0])
    {
        return $this->getEcosystemGamesAsyncWithHttpInfo($ecosystem_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEcosystemGamesAsyncWithHttpInfo
     *
     * Get ecosystem games
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEcosystemGamesAsyncWithHttpInfo($ecosystem_id, string $contentType = self::contentTypes['getEcosystemGames'][0])
    {
        $returnType = '\MetaFab\Model\PublicGame[]';
        $request = $this->getEcosystemGamesRequest($ecosystem_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEcosystemGames'
     *
     * @param  string $ecosystem_id Any ecosystem id within the MetaFab platform. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEcosystemGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEcosystemGamesRequest($ecosystem_id, string $contentType = self::contentTypes['getEcosystemGames'][0])
    {

        // verify the required parameter 'ecosystem_id' is set
        if ($ecosystem_id === null || (is_array($ecosystem_id) && count($ecosystem_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ecosystem_id when calling getEcosystemGames'
            );
        }


        $resourcePath = '/v1/ecosystems/{ecosystemId}/games';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ecosystem_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ecosystemId' . '}',
                ObjectSerializer::toPathValue($ecosystem_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProfileGame
     *
     * Get profile game
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetProfileGames200ResponseInner|string|string
     */
    public function getProfileGame($profile_id, $game_id, $x_authorization, string $contentType = self::contentTypes['getProfileGame'][0])
    {
        list($response) = $this->getProfileGameWithHttpInfo($profile_id, $game_id, $x_authorization, $contentType);
        return $response;
    }

    /**
     * Operation getProfileGameWithHttpInfo
     *
     * Get profile game
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetProfileGames200ResponseInner|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProfileGameWithHttpInfo($profile_id, $game_id, $x_authorization, string $contentType = self::contentTypes['getProfileGame'][0])
    {
        $request = $this->getProfileGameRequest($profile_id, $game_id, $x_authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetProfileGames200ResponseInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetProfileGames200ResponseInner' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetProfileGames200ResponseInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetProfileGames200ResponseInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetProfileGames200ResponseInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProfileGameAsync
     *
     * Get profile game
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfileGameAsync($profile_id, $game_id, $x_authorization, string $contentType = self::contentTypes['getProfileGame'][0])
    {
        return $this->getProfileGameAsyncWithHttpInfo($profile_id, $game_id, $x_authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProfileGameAsyncWithHttpInfo
     *
     * Get profile game
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfileGameAsyncWithHttpInfo($profile_id, $game_id, $x_authorization, string $contentType = self::contentTypes['getProfileGame'][0])
    {
        $returnType = '\MetaFab\Model\GetProfileGames200ResponseInner';
        $request = $this->getProfileGameRequest($profile_id, $game_id, $x_authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProfileGame'
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProfileGameRequest($profile_id, $game_id, $x_authorization, string $contentType = self::contentTypes['getProfileGame'][0])
    {

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling getProfileGame'
            );
        }

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling getProfileGame'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling getProfileGame'
            );
        }


        $resourcePath = '/v1/profiles/{profileId}/games/{gameId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($game_id !== null) {
            $resourcePath = str_replace(
                '{' . 'gameId' . '}',
                ObjectSerializer::toPathValue($game_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProfileGames
     *
     * Get profile games
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGames'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetProfileGames200ResponseInner[]|string|string
     */
    public function getProfileGames($profile_id, $x_authorization, string $contentType = self::contentTypes['getProfileGames'][0])
    {
        list($response) = $this->getProfileGamesWithHttpInfo($profile_id, $x_authorization, $contentType);
        return $response;
    }

    /**
     * Operation getProfileGamesWithHttpInfo
     *
     * Get profile games
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGames'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetProfileGames200ResponseInner[]|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProfileGamesWithHttpInfo($profile_id, $x_authorization, string $contentType = self::contentTypes['getProfileGames'][0])
    {
        $request = $this->getProfileGamesRequest($profile_id, $x_authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetProfileGames200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetProfileGames200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetProfileGames200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetProfileGames200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetProfileGames200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProfileGamesAsync
     *
     * Get profile games
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfileGamesAsync($profile_id, $x_authorization, string $contentType = self::contentTypes['getProfileGames'][0])
    {
        return $this->getProfileGamesAsyncWithHttpInfo($profile_id, $x_authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProfileGamesAsyncWithHttpInfo
     *
     * Get profile games
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfileGamesAsyncWithHttpInfo($profile_id, $x_authorization, string $contentType = self::contentTypes['getProfileGames'][0])
    {
        $returnType = '\MetaFab\Model\GetProfileGames200ResponseInner[]';
        $request = $this->getProfileGamesRequest($profile_id, $x_authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProfileGames'
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileGames'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProfileGamesRequest($profile_id, $x_authorization, string $contentType = self::contentTypes['getProfileGames'][0])
    {

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling getProfileGames'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling getProfileGames'
            );
        }


        $resourcePath = '/v1/profiles/{profileId}/games';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unapproveEcosystemGame
     *
     * Unapprove ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unapproveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unapproveEcosystemGame($ecosystem_id, $game_id, $x_authorization, string $contentType = self::contentTypes['unapproveEcosystemGame'][0])
    {
        $this->unapproveEcosystemGameWithHttpInfo($ecosystem_id, $game_id, $x_authorization, $contentType);
    }

    /**
     * Operation unapproveEcosystemGameWithHttpInfo
     *
     * Unapprove ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unapproveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unapproveEcosystemGameWithHttpInfo($ecosystem_id, $game_id, $x_authorization, string $contentType = self::contentTypes['unapproveEcosystemGame'][0])
    {
        $request = $this->unapproveEcosystemGameRequest($ecosystem_id, $game_id, $x_authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unapproveEcosystemGameAsync
     *
     * Unapprove ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unapproveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveEcosystemGameAsync($ecosystem_id, $game_id, $x_authorization, string $contentType = self::contentTypes['unapproveEcosystemGame'][0])
    {
        return $this->unapproveEcosystemGameAsyncWithHttpInfo($ecosystem_id, $game_id, $x_authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unapproveEcosystemGameAsyncWithHttpInfo
     *
     * Unapprove ecosystem game
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unapproveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unapproveEcosystemGameAsyncWithHttpInfo($ecosystem_id, $game_id, $x_authorization, string $contentType = self::contentTypes['unapproveEcosystemGame'][0])
    {
        $returnType = '';
        $request = $this->unapproveEcosystemGameRequest($ecosystem_id, $game_id, $x_authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unapproveEcosystemGame'
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unapproveEcosystemGame'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unapproveEcosystemGameRequest($ecosystem_id, $game_id, $x_authorization, string $contentType = self::contentTypes['unapproveEcosystemGame'][0])
    {

        // verify the required parameter 'ecosystem_id' is set
        if ($ecosystem_id === null || (is_array($ecosystem_id) && count($ecosystem_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ecosystem_id when calling unapproveEcosystemGame'
            );
        }

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling unapproveEcosystemGame'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling unapproveEcosystemGame'
            );
        }


        $resourcePath = '/v1/ecosystems/{ecosystemId}/games/{gameId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($ecosystem_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ecosystemId' . '}',
                ObjectSerializer::toPathValue($ecosystem_id),
                $resourcePath
            );
        }
        // path params
        if ($game_id !== null) {
            $resourcePath = str_replace(
                '{' . 'gameId' . '}',
                ObjectSerializer::toPathValue($game_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEcosystem
     *
     * Update ecosystem
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\UpdateEcosystemRequest $update_ecosystem_request update_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\EcosystemModel|string|string
     */
    public function updateEcosystem($ecosystem_id, $x_authorization, $update_ecosystem_request, string $contentType = self::contentTypes['updateEcosystem'][0])
    {
        list($response) = $this->updateEcosystemWithHttpInfo($ecosystem_id, $x_authorization, $update_ecosystem_request, $contentType);
        return $response;
    }

    /**
     * Operation updateEcosystemWithHttpInfo
     *
     * Update ecosystem
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\UpdateEcosystemRequest $update_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEcosystem'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\EcosystemModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEcosystemWithHttpInfo($ecosystem_id, $x_authorization, $update_ecosystem_request, string $contentType = self::contentTypes['updateEcosystem'][0])
    {
        $request = $this->updateEcosystemRequest($ecosystem_id, $x_authorization, $update_ecosystem_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\EcosystemModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\EcosystemModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\EcosystemModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\EcosystemModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\EcosystemModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEcosystemAsync
     *
     * Update ecosystem
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\UpdateEcosystemRequest $update_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEcosystemAsync($ecosystem_id, $x_authorization, $update_ecosystem_request, string $contentType = self::contentTypes['updateEcosystem'][0])
    {
        return $this->updateEcosystemAsyncWithHttpInfo($ecosystem_id, $x_authorization, $update_ecosystem_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEcosystemAsyncWithHttpInfo
     *
     * Update ecosystem
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\UpdateEcosystemRequest $update_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEcosystemAsyncWithHttpInfo($ecosystem_id, $x_authorization, $update_ecosystem_request, string $contentType = self::contentTypes['updateEcosystem'][0])
    {
        $returnType = '\MetaFab\Model\EcosystemModel';
        $request = $this->updateEcosystemRequest($ecosystem_id, $x_authorization, $update_ecosystem_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEcosystem'
     *
     * @param  string $ecosystem_id The ecosystem id of the authenticating ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating ecosystem. (required)
     * @param  \MetaFab\Model\UpdateEcosystemRequest $update_ecosystem_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEcosystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEcosystemRequest($ecosystem_id, $x_authorization, $update_ecosystem_request, string $contentType = self::contentTypes['updateEcosystem'][0])
    {

        // verify the required parameter 'ecosystem_id' is set
        if ($ecosystem_id === null || (is_array($ecosystem_id) && count($ecosystem_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ecosystem_id when calling updateEcosystem'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling updateEcosystem'
            );
        }

        // verify the required parameter 'update_ecosystem_request' is set
        if ($update_ecosystem_request === null || (is_array($update_ecosystem_request) && count($update_ecosystem_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_ecosystem_request when calling updateEcosystem'
            );
        }


        $resourcePath = '/v1/ecosystems/{ecosystemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($ecosystem_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ecosystemId' . '}',
                ObjectSerializer::toPathValue($ecosystem_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_ecosystem_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_ecosystem_request));
            } else {
                $httpBody = $update_ecosystem_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProfile
     *
     * Update profile
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  \MetaFab\Model\UpdateProfileRequest $update_profile_request update_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfile'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\ProfileModel|string|string
     */
    public function updateProfile($profile_id, $x_authorization, $update_profile_request, string $contentType = self::contentTypes['updateProfile'][0])
    {
        list($response) = $this->updateProfileWithHttpInfo($profile_id, $x_authorization, $update_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation updateProfileWithHttpInfo
     *
     * Update profile
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  \MetaFab\Model\UpdateProfileRequest $update_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfile'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\ProfileModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProfileWithHttpInfo($profile_id, $x_authorization, $update_profile_request, string $contentType = self::contentTypes['updateProfile'][0])
    {
        $request = $this->updateProfileRequest($profile_id, $x_authorization, $update_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\ProfileModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\ProfileModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\ProfileModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\ProfileModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\ProfileModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProfileAsync
     *
     * Update profile
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  \MetaFab\Model\UpdateProfileRequest $update_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProfileAsync($profile_id, $x_authorization, $update_profile_request, string $contentType = self::contentTypes['updateProfile'][0])
    {
        return $this->updateProfileAsyncWithHttpInfo($profile_id, $x_authorization, $update_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProfileAsyncWithHttpInfo
     *
     * Update profile
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  \MetaFab\Model\UpdateProfileRequest $update_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProfileAsyncWithHttpInfo($profile_id, $x_authorization, $update_profile_request, string $contentType = self::contentTypes['updateProfile'][0])
    {
        $returnType = '\MetaFab\Model\ProfileModel';
        $request = $this->updateProfileRequest($profile_id, $x_authorization, $update_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProfile'
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  \MetaFab\Model\UpdateProfileRequest $update_profile_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProfileRequest($profile_id, $x_authorization, $update_profile_request, string $contentType = self::contentTypes['updateProfile'][0])
    {

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateProfile'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling updateProfile'
            );
        }

        // verify the required parameter 'update_profile_request' is set
        if ($update_profile_request === null || (is_array($update_profile_request) && count($update_profile_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_profile_request when calling updateProfile'
            );
        }


        $resourcePath = '/v1/profiles/{profileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_profile_request));
            } else {
                $httpBody = $update_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProfilePlayer
     *
     * Update profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $player_id Any player id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\UpdateProfilePlayerRequest $update_profile_player_request update_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfilePlayer'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\UpdateProfilePlayer200Response|string|string
     */
    public function updateProfilePlayer($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, string $contentType = self::contentTypes['updateProfilePlayer'][0])
    {
        list($response) = $this->updateProfilePlayerWithHttpInfo($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, $contentType);
        return $response;
    }

    /**
     * Operation updateProfilePlayerWithHttpInfo
     *
     * Update profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $player_id Any player id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\UpdateProfilePlayerRequest $update_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfilePlayer'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\UpdateProfilePlayer200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProfilePlayerWithHttpInfo($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, string $contentType = self::contentTypes['updateProfilePlayer'][0])
    {
        $request = $this->updateProfilePlayerRequest($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\UpdateProfilePlayer200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\UpdateProfilePlayer200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\UpdateProfilePlayer200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\UpdateProfilePlayer200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\UpdateProfilePlayer200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProfilePlayerAsync
     *
     * Update profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $player_id Any player id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\UpdateProfilePlayerRequest $update_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProfilePlayerAsync($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, string $contentType = self::contentTypes['updateProfilePlayer'][0])
    {
        return $this->updateProfilePlayerAsyncWithHttpInfo($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProfilePlayerAsyncWithHttpInfo
     *
     * Update profile player
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $player_id Any player id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\UpdateProfilePlayerRequest $update_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProfilePlayerAsyncWithHttpInfo($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, string $contentType = self::contentTypes['updateProfilePlayer'][0])
    {
        $returnType = '\MetaFab\Model\UpdateProfilePlayer200Response';
        $request = $this->updateProfilePlayerRequest($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProfilePlayer'
     *
     * @param  string $profile_id The profile id of the authenticating profile. (required)
     * @param  string $game_id Any game id within the MetaFab platform. (required)
     * @param  string $player_id Any player id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating profile. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. (required)
     * @param  \MetaFab\Model\UpdateProfilePlayerRequest $update_profile_player_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProfilePlayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProfilePlayerRequest($profile_id, $game_id, $player_id, $x_authorization, $x_wallet_decrypt_key, $update_profile_player_request, string $contentType = self::contentTypes['updateProfilePlayer'][0])
    {

        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling updateProfilePlayer'
            );
        }

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling updateProfilePlayer'
            );
        }

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling updateProfilePlayer'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling updateProfilePlayer'
            );
        }

        // verify the required parameter 'x_wallet_decrypt_key' is set
        if ($x_wallet_decrypt_key === null || (is_array($x_wallet_decrypt_key) && count($x_wallet_decrypt_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_wallet_decrypt_key when calling updateProfilePlayer'
            );
        }

        // verify the required parameter 'update_profile_player_request' is set
        if ($update_profile_player_request === null || (is_array($update_profile_player_request) && count($update_profile_player_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_profile_player_request when calling updateProfilePlayer'
            );
        }


        $resourcePath = '/v1/profiles/{profileId}/games/{gameId}/players/{playerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_wallet_decrypt_key !== null) {
            $headerParams['X-Wallet-Decrypt-Key'] = ObjectSerializer::toHeaderValue($x_wallet_decrypt_key);
        }

        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profileId' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($game_id !== null) {
            $resourcePath = str_replace(
                '{' . 'gameId' . '}',
                ObjectSerializer::toPathValue($game_id),
                $resourcePath
            );
        }
        // path params
        if ($player_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerId' . '}',
                ObjectSerializer::toPathValue($player_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_profile_player_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_profile_player_request));
            } else {
                $httpBody = $update_profile_player_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
