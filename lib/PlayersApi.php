<?php
/**
 * PlayersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MetaFab\MetaFab;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MetaFab\ApiException;
use MetaFab\Configuration;
use MetaFab\HeaderSelector;
use MetaFab\ObjectSerializer;

/**
 * PlayersApi Class Doc Comment
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlayersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authPlayer
     *
     * Authenticate player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\AuthPlayer200Response|string|string
     */
    public function authPlayer($x_game_key)
    {
        list($response) = $this->authPlayerWithHttpInfo($x_game_key);
        return $response;
    }

    /**
     * Operation authPlayerWithHttpInfo
     *
     * Authenticate player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\AuthPlayer200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function authPlayerWithHttpInfo($x_game_key)
    {
        $request = $this->authPlayerRequest($x_game_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\AuthPlayer200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\AuthPlayer200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\AuthPlayer200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\AuthPlayer200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\AuthPlayer200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authPlayerAsync
     *
     * Authenticate player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authPlayerAsync($x_game_key)
    {
        return $this->authPlayerAsyncWithHttpInfo($x_game_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authPlayerAsyncWithHttpInfo
     *
     * Authenticate player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authPlayerAsyncWithHttpInfo($x_game_key)
    {
        $returnType = '\MetaFab\Model\AuthPlayer200Response';
        $request = $this->authPlayerRequest($x_game_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authPlayer'
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authPlayerRequest($x_game_key)
    {

        // verify the required parameter 'x_game_key' is set
        if ($x_game_key === null || (is_array($x_game_key) && count($x_game_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_game_key when calling authPlayer'
            );
        }

        $resourcePath = '/v1/players/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_game_key !== null) {
            $headerParams['X-Game-Key'] = ObjectSerializer::toHeaderValue($x_game_key);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPlayer
     *
     * Create player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreatePlayerRequest $create_player_request create_player_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\AuthPlayer200Response|string|string
     */
    public function createPlayer($x_game_key, $create_player_request)
    {
        list($response) = $this->createPlayerWithHttpInfo($x_game_key, $create_player_request);
        return $response;
    }

    /**
     * Operation createPlayerWithHttpInfo
     *
     * Create player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreatePlayerRequest $create_player_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\AuthPlayer200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlayerWithHttpInfo($x_game_key, $create_player_request)
    {
        $request = $this->createPlayerRequest($x_game_key, $create_player_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\AuthPlayer200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\AuthPlayer200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\AuthPlayer200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\AuthPlayer200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\AuthPlayer200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPlayerAsync
     *
     * Create player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreatePlayerRequest $create_player_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlayerAsync($x_game_key, $create_player_request)
    {
        return $this->createPlayerAsyncWithHttpInfo($x_game_key, $create_player_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPlayerAsyncWithHttpInfo
     *
     * Create player
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreatePlayerRequest $create_player_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlayerAsyncWithHttpInfo($x_game_key, $create_player_request)
    {
        $returnType = '\MetaFab\Model\AuthPlayer200Response';
        $request = $this->createPlayerRequest($x_game_key, $create_player_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPlayer'
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  \MetaFab\Model\CreatePlayerRequest $create_player_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPlayerRequest($x_game_key, $create_player_request)
    {

        // verify the required parameter 'x_game_key' is set
        if ($x_game_key === null || (is_array($x_game_key) && count($x_game_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_game_key when calling createPlayer'
            );
        }

        // verify the required parameter 'create_player_request' is set
        if ($create_player_request === null || (is_array($create_player_request) && count($create_player_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_player_request when calling createPlayer'
            );
        }

        $resourcePath = '/v1/players';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_game_key !== null) {
            $headerParams['X-Game-Key'] = ObjectSerializer::toHeaderValue($x_game_key);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_player_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_player_request));
            } else {
                $httpBody = $create_player_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlayer
     *
     * Get player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\PublicPlayer|string
     */
    public function getPlayer($player_id)
    {
        list($response) = $this->getPlayerWithHttpInfo($player_id);
        return $response;
    }

    /**
     * Operation getPlayerWithHttpInfo
     *
     * Get player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\PublicPlayer|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlayerWithHttpInfo($player_id)
    {
        $request = $this->getPlayerRequest($player_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\PublicPlayer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\PublicPlayer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\PublicPlayer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\PublicPlayer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\PublicPlayer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlayerAsync
     *
     * Get player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlayerAsync($player_id)
    {
        return $this->getPlayerAsyncWithHttpInfo($player_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlayerAsyncWithHttpInfo
     *
     * Get player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlayerAsyncWithHttpInfo($player_id)
    {
        $returnType = '\MetaFab\Model\PublicPlayer';
        $request = $this->getPlayerRequest($player_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlayer'
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlayerRequest($player_id)
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling getPlayer'
            );
        }

        $resourcePath = '/v1/players/{playerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($player_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerId' . '}',
                ObjectSerializer::toPathValue($player_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlayerData
     *
     * Get player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetPlayerData200Response|string
     */
    public function getPlayerData($player_id)
    {
        list($response) = $this->getPlayerDataWithHttpInfo($player_id);
        return $response;
    }

    /**
     * Operation getPlayerDataWithHttpInfo
     *
     * Get player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetPlayerData200Response|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlayerDataWithHttpInfo($player_id)
    {
        $request = $this->getPlayerDataRequest($player_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetPlayerData200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetPlayerData200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetPlayerData200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetPlayerData200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetPlayerData200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlayerDataAsync
     *
     * Get player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlayerDataAsync($player_id)
    {
        return $this->getPlayerDataAsyncWithHttpInfo($player_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlayerDataAsyncWithHttpInfo
     *
     * Get player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlayerDataAsyncWithHttpInfo($player_id)
    {
        $returnType = '\MetaFab\Model\GetPlayerData200Response';
        $request = $this->getPlayerDataRequest($player_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlayerData'
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlayerDataRequest($player_id)
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling getPlayerData'
            );
        }

        $resourcePath = '/v1/players/{playerId}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($player_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerId' . '}',
                ObjectSerializer::toPathValue($player_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlayers
     *
     * Get players
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\PublicPlayer[]|string
     */
    public function getPlayers($x_authorization)
    {
        list($response) = $this->getPlayersWithHttpInfo($x_authorization);
        return $response;
    }

    /**
     * Operation getPlayersWithHttpInfo
     *
     * Get players
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\PublicPlayer[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlayersWithHttpInfo($x_authorization)
    {
        $request = $this->getPlayersRequest($x_authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\PublicPlayer[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\PublicPlayer[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\PublicPlayer[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\PublicPlayer[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\PublicPlayer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlayersAsync
     *
     * Get players
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlayersAsync($x_authorization)
    {
        return $this->getPlayersAsyncWithHttpInfo($x_authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlayersAsyncWithHttpInfo
     *
     * Get players
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlayersAsyncWithHttpInfo($x_authorization)
    {
        $returnType = '\MetaFab\Model\PublicPlayer[]';
        $request = $this->getPlayersRequest($x_authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlayers'
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlayersRequest($x_authorization)
    {

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling getPlayers'
            );
        }

        $resourcePath = '/v1/players';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removePlayerConnectedWallet
     *
     * Remove player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $player_wallet_id Any player wallet id within the MetaFab ecosystem. (required)
     * @param  \MetaFab\Model\RemovePlayerConnectedWalletRequest $remove_player_connected_wallet_request remove_player_connected_wallet_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removePlayerConnectedWallet($player_id, $player_wallet_id, $remove_player_connected_wallet_request)
    {
        $this->removePlayerConnectedWalletWithHttpInfo($player_id, $player_wallet_id, $remove_player_connected_wallet_request);
    }

    /**
     * Operation removePlayerConnectedWalletWithHttpInfo
     *
     * Remove player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $player_wallet_id Any player wallet id within the MetaFab ecosystem. (required)
     * @param  \MetaFab\Model\RemovePlayerConnectedWalletRequest $remove_player_connected_wallet_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removePlayerConnectedWalletWithHttpInfo($player_id, $player_wallet_id, $remove_player_connected_wallet_request)
    {
        $request = $this->removePlayerConnectedWalletRequest($player_id, $player_wallet_id, $remove_player_connected_wallet_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removePlayerConnectedWalletAsync
     *
     * Remove player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $player_wallet_id Any player wallet id within the MetaFab ecosystem. (required)
     * @param  \MetaFab\Model\RemovePlayerConnectedWalletRequest $remove_player_connected_wallet_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removePlayerConnectedWalletAsync($player_id, $player_wallet_id, $remove_player_connected_wallet_request)
    {
        return $this->removePlayerConnectedWalletAsyncWithHttpInfo($player_id, $player_wallet_id, $remove_player_connected_wallet_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removePlayerConnectedWalletAsyncWithHttpInfo
     *
     * Remove player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $player_wallet_id Any player wallet id within the MetaFab ecosystem. (required)
     * @param  \MetaFab\Model\RemovePlayerConnectedWalletRequest $remove_player_connected_wallet_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removePlayerConnectedWalletAsyncWithHttpInfo($player_id, $player_wallet_id, $remove_player_connected_wallet_request)
    {
        $returnType = '';
        $request = $this->removePlayerConnectedWalletRequest($player_id, $player_wallet_id, $remove_player_connected_wallet_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removePlayerConnectedWallet'
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $player_wallet_id Any player wallet id within the MetaFab ecosystem. (required)
     * @param  \MetaFab\Model\RemovePlayerConnectedWalletRequest $remove_player_connected_wallet_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removePlayerConnectedWalletRequest($player_id, $player_wallet_id, $remove_player_connected_wallet_request)
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling removePlayerConnectedWallet'
            );
        }

        // verify the required parameter 'player_wallet_id' is set
        if ($player_wallet_id === null || (is_array($player_wallet_id) && count($player_wallet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_wallet_id when calling removePlayerConnectedWallet'
            );
        }

        // verify the required parameter 'remove_player_connected_wallet_request' is set
        if ($remove_player_connected_wallet_request === null || (is_array($remove_player_connected_wallet_request) && count($remove_player_connected_wallet_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $remove_player_connected_wallet_request when calling removePlayerConnectedWallet'
            );
        }

        $resourcePath = '/v1/players/{playerId}/wallets/{playerWalletId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($player_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerId' . '}',
                ObjectSerializer::toPathValue($player_id),
                $resourcePath
            );
        }
        // path params
        if ($player_wallet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerWalletId' . '}',
                ObjectSerializer::toPathValue($player_wallet_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($remove_player_connected_wallet_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($remove_player_connected_wallet_request));
            } else {
                $httpBody = $remove_player_connected_wallet_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPlayerConnectedWallet
     *
     * Set player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\SetPlayerConnectedWalletRequest $set_player_connected_wallet_request set_player_connected_wallet_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\SetPlayerConnectedWallet200Response|string|string
     */
    public function setPlayerConnectedWallet($player_id, $x_authorization, $set_player_connected_wallet_request)
    {
        list($response) = $this->setPlayerConnectedWalletWithHttpInfo($player_id, $x_authorization, $set_player_connected_wallet_request);
        return $response;
    }

    /**
     * Operation setPlayerConnectedWalletWithHttpInfo
     *
     * Set player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\SetPlayerConnectedWalletRequest $set_player_connected_wallet_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\SetPlayerConnectedWallet200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPlayerConnectedWalletWithHttpInfo($player_id, $x_authorization, $set_player_connected_wallet_request)
    {
        $request = $this->setPlayerConnectedWalletRequest($player_id, $x_authorization, $set_player_connected_wallet_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\SetPlayerConnectedWallet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\SetPlayerConnectedWallet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\SetPlayerConnectedWallet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\SetPlayerConnectedWallet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\SetPlayerConnectedWallet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setPlayerConnectedWalletAsync
     *
     * Set player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\SetPlayerConnectedWalletRequest $set_player_connected_wallet_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPlayerConnectedWalletAsync($player_id, $x_authorization, $set_player_connected_wallet_request)
    {
        return $this->setPlayerConnectedWalletAsyncWithHttpInfo($player_id, $x_authorization, $set_player_connected_wallet_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPlayerConnectedWalletAsyncWithHttpInfo
     *
     * Set player connected wallet
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\SetPlayerConnectedWalletRequest $set_player_connected_wallet_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPlayerConnectedWalletAsyncWithHttpInfo($player_id, $x_authorization, $set_player_connected_wallet_request)
    {
        $returnType = '\MetaFab\Model\SetPlayerConnectedWallet200Response';
        $request = $this->setPlayerConnectedWalletRequest($player_id, $x_authorization, $set_player_connected_wallet_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPlayerConnectedWallet'
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\SetPlayerConnectedWalletRequest $set_player_connected_wallet_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setPlayerConnectedWalletRequest($player_id, $x_authorization, $set_player_connected_wallet_request)
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling setPlayerConnectedWallet'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling setPlayerConnectedWallet'
            );
        }

        // verify the required parameter 'set_player_connected_wallet_request' is set
        if ($set_player_connected_wallet_request === null || (is_array($set_player_connected_wallet_request) && count($set_player_connected_wallet_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_player_connected_wallet_request when calling setPlayerConnectedWallet'
            );
        }

        $resourcePath = '/v1/players/{playerId}/wallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($player_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerId' . '}',
                ObjectSerializer::toPathValue($player_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_player_connected_wallet_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_player_connected_wallet_request));
            } else {
                $httpBody = $set_player_connected_wallet_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPlayerData
     *
     * Set player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  \MetaFab\Model\SetPlayerDataRequest $set_player_data_request set_player_data_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetPlayerData200Response|string
     */
    public function setPlayerData($player_id, $x_authorization, $set_player_data_request)
    {
        list($response) = $this->setPlayerDataWithHttpInfo($player_id, $x_authorization, $set_player_data_request);
        return $response;
    }

    /**
     * Operation setPlayerDataWithHttpInfo
     *
     * Set player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  \MetaFab\Model\SetPlayerDataRequest $set_player_data_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetPlayerData200Response|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPlayerDataWithHttpInfo($player_id, $x_authorization, $set_player_data_request)
    {
        $request = $this->setPlayerDataRequest($player_id, $x_authorization, $set_player_data_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetPlayerData200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetPlayerData200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetPlayerData200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetPlayerData200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetPlayerData200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setPlayerDataAsync
     *
     * Set player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  \MetaFab\Model\SetPlayerDataRequest $set_player_data_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPlayerDataAsync($player_id, $x_authorization, $set_player_data_request)
    {
        return $this->setPlayerDataAsyncWithHttpInfo($player_id, $x_authorization, $set_player_data_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPlayerDataAsyncWithHttpInfo
     *
     * Set player data
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  \MetaFab\Model\SetPlayerDataRequest $set_player_data_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPlayerDataAsyncWithHttpInfo($player_id, $x_authorization, $set_player_data_request)
    {
        $returnType = '\MetaFab\Model\GetPlayerData200Response';
        $request = $this->setPlayerDataRequest($player_id, $x_authorization, $set_player_data_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPlayerData'
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  \MetaFab\Model\SetPlayerDataRequest $set_player_data_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setPlayerDataRequest($player_id, $x_authorization, $set_player_data_request)
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling setPlayerData'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling setPlayerData'
            );
        }

        // verify the required parameter 'set_player_data_request' is set
        if ($set_player_data_request === null || (is_array($set_player_data_request) && count($set_player_data_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_player_data_request when calling setPlayerData'
            );
        }

        $resourcePath = '/v1/players/{playerId}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($player_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerId' . '}',
                ObjectSerializer::toPathValue($player_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_player_data_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_player_data_request));
            } else {
                $httpBody = $set_player_data_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePlayer
     *
     * Update player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\UpdatePlayerRequest $update_player_request update_player_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\PlayerModel|string|string
     */
    public function updatePlayer($player_id, $x_authorization, $update_player_request)
    {
        list($response) = $this->updatePlayerWithHttpInfo($player_id, $x_authorization, $update_player_request);
        return $response;
    }

    /**
     * Operation updatePlayerWithHttpInfo
     *
     * Update player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\UpdatePlayerRequest $update_player_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\PlayerModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePlayerWithHttpInfo($player_id, $x_authorization, $update_player_request)
    {
        $request = $this->updatePlayerRequest($player_id, $x_authorization, $update_player_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\PlayerModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\PlayerModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\PlayerModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\PlayerModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\PlayerModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePlayerAsync
     *
     * Update player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\UpdatePlayerRequest $update_player_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlayerAsync($player_id, $x_authorization, $update_player_request)
    {
        return $this->updatePlayerAsyncWithHttpInfo($player_id, $x_authorization, $update_player_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePlayerAsyncWithHttpInfo
     *
     * Update player
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\UpdatePlayerRequest $update_player_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlayerAsyncWithHttpInfo($player_id, $x_authorization, $update_player_request)
    {
        $returnType = '\MetaFab\Model\PlayerModel';
        $request = $this->updatePlayerRequest($player_id, $x_authorization, $update_player_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePlayer'
     *
     * @param  string $player_id Any player id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;accessToken&#x60; of the authenticating player. (required)
     * @param  \MetaFab\Model\UpdatePlayerRequest $update_player_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePlayerRequest($player_id, $x_authorization, $update_player_request)
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling updatePlayer'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling updatePlayer'
            );
        }

        // verify the required parameter 'update_player_request' is set
        if ($update_player_request === null || (is_array($update_player_request) && count($update_player_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_player_request when calling updatePlayer'
            );
        }

        $resourcePath = '/v1/players/{playerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }

        // path params
        if ($player_id !== null) {
            $resourcePath = str_replace(
                '{' . 'playerId' . '}',
                ObjectSerializer::toPathValue($player_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_player_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_player_request));
            } else {
                $httpBody = $update_player_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
