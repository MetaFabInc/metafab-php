<?php
/**
 * LootboxesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MetaFab\MetaFab;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MetaFab\ApiException;
use MetaFab\Configuration;
use MetaFab\HeaderSelector;
use MetaFab\ObjectSerializer;

/**
 * LootboxesApi Class Doc Comment
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LootboxesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createLootboxManager
     *
     * Create lootbox manager
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateLootboxManagerRequest $create_lootbox_manager_request create_lootbox_manager_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\CreateLootboxManager200Response|string|string
     */
    public function createLootboxManager($x_authorization, $x_password, $create_lootbox_manager_request)
    {
        list($response) = $this->createLootboxManagerWithHttpInfo($x_authorization, $x_password, $create_lootbox_manager_request);
        return $response;
    }

    /**
     * Operation createLootboxManagerWithHttpInfo
     *
     * Create lootbox manager
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateLootboxManagerRequest $create_lootbox_manager_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\CreateLootboxManager200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLootboxManagerWithHttpInfo($x_authorization, $x_password, $create_lootbox_manager_request)
    {
        $request = $this->createLootboxManagerRequest($x_authorization, $x_password, $create_lootbox_manager_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\CreateLootboxManager200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\CreateLootboxManager200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\CreateLootboxManager200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\CreateLootboxManager200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\CreateLootboxManager200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLootboxManagerAsync
     *
     * Create lootbox manager
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateLootboxManagerRequest $create_lootbox_manager_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLootboxManagerAsync($x_authorization, $x_password, $create_lootbox_manager_request)
    {
        return $this->createLootboxManagerAsyncWithHttpInfo($x_authorization, $x_password, $create_lootbox_manager_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLootboxManagerAsyncWithHttpInfo
     *
     * Create lootbox manager
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateLootboxManagerRequest $create_lootbox_manager_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLootboxManagerAsyncWithHttpInfo($x_authorization, $x_password, $create_lootbox_manager_request)
    {
        $returnType = '\MetaFab\Model\CreateLootboxManager200Response';
        $request = $this->createLootboxManagerRequest($x_authorization, $x_password, $create_lootbox_manager_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLootboxManager'
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateLootboxManagerRequest $create_lootbox_manager_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLootboxManagerRequest($x_authorization, $x_password, $create_lootbox_manager_request)
    {

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling createLootboxManager'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling createLootboxManager'
            );
        }

        // verify the required parameter 'create_lootbox_manager_request' is set
        if ($create_lootbox_manager_request === null || (is_array($create_lootbox_manager_request) && count($create_lootbox_manager_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_lootbox_manager_request when calling createLootboxManager'
            );
        }

        $resourcePath = '/v1/lootboxManagers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_lootbox_manager_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_lootbox_manager_request));
            } else {
                $httpBody = $create_lootbox_manager_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLootboxManagerLootbox
     *
     * Get lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\LootboxManagerLootbox|string
     */
    public function getLootboxManagerLootbox($lootbox_manager_id, $lootbox_manager_lootbox_id)
    {
        list($response) = $this->getLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id);
        return $response;
    }

    /**
     * Operation getLootboxManagerLootboxWithHttpInfo
     *
     * Get lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\LootboxManagerLootbox|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id)
    {
        $request = $this->getLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\LootboxManagerLootbox' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\LootboxManagerLootbox' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\LootboxManagerLootbox', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\LootboxManagerLootbox';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\LootboxManagerLootbox',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLootboxManagerLootboxAsync
     *
     * Get lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLootboxManagerLootboxAsync($lootbox_manager_id, $lootbox_manager_lootbox_id)
    {
        return $this->getLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLootboxManagerLootboxAsyncWithHttpInfo
     *
     * Get lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id)
    {
        $returnType = '\MetaFab\Model\LootboxManagerLootbox';
        $request = $this->getLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLootboxManagerLootbox'
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id)
    {

        // verify the required parameter 'lootbox_manager_id' is set
        if ($lootbox_manager_id === null || (is_array($lootbox_manager_id) && count($lootbox_manager_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_id when calling getLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'lootbox_manager_lootbox_id' is set
        if ($lootbox_manager_lootbox_id === null || (is_array($lootbox_manager_lootbox_id) && count($lootbox_manager_lootbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_lootbox_id when calling getLootboxManagerLootbox'
            );
        }

        $resourcePath = '/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lootbox_manager_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_id),
                $resourcePath
            );
        }
        // path params
        if ($lootbox_manager_lootbox_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerLootboxId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_lootbox_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLootboxManagerLootboxes
     *
     * Get lootbox manager lootboxes
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\LootboxManagerLootbox[]|string
     */
    public function getLootboxManagerLootboxes($lootbox_manager_id)
    {
        list($response) = $this->getLootboxManagerLootboxesWithHttpInfo($lootbox_manager_id);
        return $response;
    }

    /**
     * Operation getLootboxManagerLootboxesWithHttpInfo
     *
     * Get lootbox manager lootboxes
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\LootboxManagerLootbox[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLootboxManagerLootboxesWithHttpInfo($lootbox_manager_id)
    {
        $request = $this->getLootboxManagerLootboxesRequest($lootbox_manager_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\LootboxManagerLootbox[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\LootboxManagerLootbox[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\LootboxManagerLootbox[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\LootboxManagerLootbox[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\LootboxManagerLootbox[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLootboxManagerLootboxesAsync
     *
     * Get lootbox manager lootboxes
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLootboxManagerLootboxesAsync($lootbox_manager_id)
    {
        return $this->getLootboxManagerLootboxesAsyncWithHttpInfo($lootbox_manager_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLootboxManagerLootboxesAsyncWithHttpInfo
     *
     * Get lootbox manager lootboxes
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLootboxManagerLootboxesAsyncWithHttpInfo($lootbox_manager_id)
    {
        $returnType = '\MetaFab\Model\LootboxManagerLootbox[]';
        $request = $this->getLootboxManagerLootboxesRequest($lootbox_manager_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLootboxManagerLootboxes'
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLootboxManagerLootboxesRequest($lootbox_manager_id)
    {

        // verify the required parameter 'lootbox_manager_id' is set
        if ($lootbox_manager_id === null || (is_array($lootbox_manager_id) && count($lootbox_manager_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_id when calling getLootboxManagerLootboxes'
            );
        }

        $resourcePath = '/v1/lootboxManagers/{lootboxManagerId}/lootboxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lootbox_manager_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLootboxManagers
     *
     * Get lootbox managers
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetLootboxManagers200ResponseInner[]|string
     */
    public function getLootboxManagers($x_game_key)
    {
        list($response) = $this->getLootboxManagersWithHttpInfo($x_game_key);
        return $response;
    }

    /**
     * Operation getLootboxManagersWithHttpInfo
     *
     * Get lootbox managers
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetLootboxManagers200ResponseInner[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLootboxManagersWithHttpInfo($x_game_key)
    {
        $request = $this->getLootboxManagersRequest($x_game_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetLootboxManagers200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetLootboxManagers200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetLootboxManagers200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetLootboxManagers200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetLootboxManagers200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLootboxManagersAsync
     *
     * Get lootbox managers
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLootboxManagersAsync($x_game_key)
    {
        return $this->getLootboxManagersAsyncWithHttpInfo($x_game_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLootboxManagersAsyncWithHttpInfo
     *
     * Get lootbox managers
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLootboxManagersAsyncWithHttpInfo($x_game_key)
    {
        $returnType = '\MetaFab\Model\GetLootboxManagers200ResponseInner[]';
        $request = $this->getLootboxManagersRequest($x_game_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLootboxManagers'
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLootboxManagersRequest($x_game_key)
    {

        // verify the required parameter 'x_game_key' is set
        if ($x_game_key === null || (is_array($x_game_key) && count($x_game_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_game_key when calling getLootboxManagers'
            );
        }

        $resourcePath = '/v1/lootboxManagers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_game_key !== null) {
            $headerParams['X-Game-Key'] = ObjectSerializer::toHeaderValue($x_game_key);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation openLootboxManagerLootbox
     *
     * Open lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel[]|string|string
     */
    public function openLootboxManagerLootbox($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        list($response) = $this->openLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password);
        return $response;
    }

    /**
     * Operation openLootboxManagerLootboxWithHttpInfo
     *
     * Open lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel[]|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function openLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        $request = $this->openLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation openLootboxManagerLootboxAsync
     *
     * Open lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function openLootboxManagerLootboxAsync($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        return $this->openLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation openLootboxManagerLootboxAsyncWithHttpInfo
     *
     * Open lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function openLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        $returnType = '\MetaFab\Model\TransactionModel[]';
        $request = $this->openLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'openLootboxManagerLootbox'
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function openLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {

        // verify the required parameter 'lootbox_manager_id' is set
        if ($lootbox_manager_id === null || (is_array($lootbox_manager_id) && count($lootbox_manager_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_id when calling openLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'lootbox_manager_lootbox_id' is set
        if ($lootbox_manager_lootbox_id === null || (is_array($lootbox_manager_lootbox_id) && count($lootbox_manager_lootbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_lootbox_id when calling openLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling openLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling openLootboxManagerLootbox'
            );
        }

        $resourcePath = '/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($lootbox_manager_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_id),
                $resourcePath
            );
        }
        // path params
        if ($lootbox_manager_lootbox_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerLootboxId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_lootbox_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeLootboxManagerLootbox
     *
     * Remove lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function removeLootboxManagerLootbox($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        list($response) = $this->removeLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password);
        return $response;
    }

    /**
     * Operation removeLootboxManagerLootboxWithHttpInfo
     *
     * Remove lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        $request = $this->removeLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeLootboxManagerLootboxAsync
     *
     * Remove lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeLootboxManagerLootboxAsync($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        return $this->removeLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeLootboxManagerLootboxAsyncWithHttpInfo
     *
     * Remove lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->removeLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeLootboxManagerLootbox'
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $lootbox_manager_lootbox_id Any lootbox manager lootbox id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeLootboxManagerLootboxRequest($lootbox_manager_id, $lootbox_manager_lootbox_id, $x_authorization, $x_password)
    {

        // verify the required parameter 'lootbox_manager_id' is set
        if ($lootbox_manager_id === null || (is_array($lootbox_manager_id) && count($lootbox_manager_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_id when calling removeLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'lootbox_manager_lootbox_id' is set
        if ($lootbox_manager_lootbox_id === null || (is_array($lootbox_manager_lootbox_id) && count($lootbox_manager_lootbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_lootbox_id when calling removeLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling removeLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling removeLootboxManagerLootbox'
            );
        }

        $resourcePath = '/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($lootbox_manager_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_id),
                $resourcePath
            );
        }
        // path params
        if ($lootbox_manager_lootbox_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerLootboxId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_lootbox_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setLootboxManagerLootbox
     *
     * Set lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetLootboxManagerLootboxRequest $set_lootbox_manager_lootbox_request set_lootbox_manager_lootbox_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function setLootboxManagerLootbox($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request)
    {
        list($response) = $this->setLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request);
        return $response;
    }

    /**
     * Operation setLootboxManagerLootboxWithHttpInfo
     *
     * Set lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetLootboxManagerLootboxRequest $set_lootbox_manager_lootbox_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setLootboxManagerLootboxWithHttpInfo($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request)
    {
        $request = $this->setLootboxManagerLootboxRequest($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setLootboxManagerLootboxAsync
     *
     * Set lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetLootboxManagerLootboxRequest $set_lootbox_manager_lootbox_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setLootboxManagerLootboxAsync($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request)
    {
        return $this->setLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setLootboxManagerLootboxAsyncWithHttpInfo
     *
     * Set lootbox manager lootbox
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetLootboxManagerLootboxRequest $set_lootbox_manager_lootbox_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setLootboxManagerLootboxAsyncWithHttpInfo($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->setLootboxManagerLootboxRequest($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setLootboxManagerLootbox'
     *
     * @param  string $lootbox_manager_id Any lootbox manager id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetLootboxManagerLootboxRequest $set_lootbox_manager_lootbox_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setLootboxManagerLootboxRequest($lootbox_manager_id, $x_authorization, $x_password, $set_lootbox_manager_lootbox_request)
    {

        // verify the required parameter 'lootbox_manager_id' is set
        if ($lootbox_manager_id === null || (is_array($lootbox_manager_id) && count($lootbox_manager_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lootbox_manager_id when calling setLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling setLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling setLootboxManagerLootbox'
            );
        }

        // verify the required parameter 'set_lootbox_manager_lootbox_request' is set
        if ($set_lootbox_manager_lootbox_request === null || (is_array($set_lootbox_manager_lootbox_request) && count($set_lootbox_manager_lootbox_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_lootbox_manager_lootbox_request when calling setLootboxManagerLootbox'
            );
        }

        $resourcePath = '/v1/lootboxManagers/{lootboxManagerId}/lootboxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($lootbox_manager_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lootboxManagerId' . '}',
                ObjectSerializer::toPathValue($lootbox_manager_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_lootbox_manager_lootbox_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_lootbox_manager_lootbox_request));
            } else {
                $httpBody = $set_lootbox_manager_lootbox_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
