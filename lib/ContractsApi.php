<?php
/**
 * ContractsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MetaFab\MetaFab;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MetaFab\ApiException;
use MetaFab\Configuration;
use MetaFab\HeaderSelector;
use MetaFab\ObjectSerializer;

/**
 * ContractsApi Class Doc Comment
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContractsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createContract' => [
            'application/json',
        ],
        'getContracts' => [
            'application/json',
        ],
        'readContract' => [
            'application/json',
        ],
        'transferContractOwnership' => [
            'application/json',
        ],
        'upgradeContractTrustedForwarder' => [
            'application/json',
        ],
        'writeContract' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createContract
     *
     * Create custom contract
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  \MetaFab\Model\CreateContractRequest $create_contract_request create_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContract'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\ContractModel|string|string
     */
    public function createContract($x_authorization, $create_contract_request, string $contentType = self::contentTypes['createContract'][0])
    {
        list($response) = $this->createContractWithHttpInfo($x_authorization, $create_contract_request, $contentType);
        return $response;
    }

    /**
     * Operation createContractWithHttpInfo
     *
     * Create custom contract
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  \MetaFab\Model\CreateContractRequest $create_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContract'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\ContractModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContractWithHttpInfo($x_authorization, $create_contract_request, string $contentType = self::contentTypes['createContract'][0])
    {
        $request = $this->createContractRequest($x_authorization, $create_contract_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\ContractModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\ContractModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\ContractModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\ContractModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\ContractModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createContractAsync
     *
     * Create custom contract
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  \MetaFab\Model\CreateContractRequest $create_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractAsync($x_authorization, $create_contract_request, string $contentType = self::contentTypes['createContract'][0])
    {
        return $this->createContractAsyncWithHttpInfo($x_authorization, $create_contract_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createContractAsyncWithHttpInfo
     *
     * Create custom contract
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  \MetaFab\Model\CreateContractRequest $create_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createContractAsyncWithHttpInfo($x_authorization, $create_contract_request, string $contentType = self::contentTypes['createContract'][0])
    {
        $returnType = '\MetaFab\Model\ContractModel';
        $request = $this->createContractRequest($x_authorization, $create_contract_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createContract'
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  \MetaFab\Model\CreateContractRequest $create_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createContractRequest($x_authorization, $create_contract_request, string $contentType = self::contentTypes['createContract'][0])
    {

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling createContract'
            );
        }

        // verify the required parameter 'create_contract_request' is set
        if ($create_contract_request === null || (is_array($create_contract_request) && count($create_contract_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_contract_request when calling createContract'
            );
        }


        $resourcePath = '/v1/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_contract_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_contract_request));
            } else {
                $httpBody = $create_contract_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContracts
     *
     * Get contracts
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContracts'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\ContractModel[]|string
     */
    public function getContracts($x_game_key, string $contentType = self::contentTypes['getContracts'][0])
    {
        list($response) = $this->getContractsWithHttpInfo($x_game_key, $contentType);
        return $response;
    }

    /**
     * Operation getContractsWithHttpInfo
     *
     * Get contracts
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContracts'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\ContractModel[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContractsWithHttpInfo($x_game_key, string $contentType = self::contentTypes['getContracts'][0])
    {
        $request = $this->getContractsRequest($x_game_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\ContractModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\ContractModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\ContractModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\ContractModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\ContractModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContractsAsync
     *
     * Get contracts
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContracts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractsAsync($x_game_key, string $contentType = self::contentTypes['getContracts'][0])
    {
        return $this->getContractsAsyncWithHttpInfo($x_game_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContractsAsyncWithHttpInfo
     *
     * Get contracts
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContracts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContractsAsyncWithHttpInfo($x_game_key, string $contentType = self::contentTypes['getContracts'][0])
    {
        $returnType = '\MetaFab\Model\ContractModel[]';
        $request = $this->getContractsRequest($x_game_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContracts'
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContracts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContractsRequest($x_game_key, string $contentType = self::contentTypes['getContracts'][0])
    {

        // verify the required parameter 'x_game_key' is set
        if ($x_game_key === null || (is_array($x_game_key) && count($x_game_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_game_key when calling getContracts'
            );
        }


        $resourcePath = '/v1/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_game_key !== null) {
            $headerParams['X-Game-Key'] = ObjectSerializer::toHeaderValue($x_game_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readContract
     *
     * Read contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param  string $args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readContract'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed|string
     */
    public function readContract($contract_id, $func, $args = null, string $contentType = self::contentTypes['readContract'][0])
    {
        list($response) = $this->readContractWithHttpInfo($contract_id, $func, $args, $contentType);
        return $response;
    }

    /**
     * Operation readContractWithHttpInfo
     *
     * Read contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param  string $args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readContract'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function readContractWithHttpInfo($contract_id, $func, $args = null, string $contentType = self::contentTypes['readContract'][0])
    {
        $request = $this->readContractRequest($contract_id, $func, $args, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readContractAsync
     *
     * Read contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param  string $args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readContractAsync($contract_id, $func, $args = null, string $contentType = self::contentTypes['readContract'][0])
    {
        return $this->readContractAsyncWithHttpInfo($contract_id, $func, $args, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readContractAsyncWithHttpInfo
     *
     * Read contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param  string $args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readContractAsyncWithHttpInfo($contract_id, $func, $args = null, string $contentType = self::contentTypes['readContract'][0])
    {
        $returnType = 'mixed';
        $request = $this->readContractRequest($contract_id, $func, $args, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readContract'
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $func A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;. (required)
     * @param  string $args A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readContractRequest($contract_id, $func, $args = null, string $contentType = self::contentTypes['readContract'][0])
    {

        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling readContract'
            );
        }

        // verify the required parameter 'func' is set
        if ($func === null || (is_array($func) && count($func) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $func when calling readContract'
            );
        }



        $resourcePath = '/v1/contracts/{contractId}/reads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $func,
            'func', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $args,
            'args', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferContractOwnership
     *
     * Transfer contract ownership
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\TransferContractOwnershipRequest $transfer_contract_ownership_request transfer_contract_ownership_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferContractOwnership'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function transferContractOwnership($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, string $contentType = self::contentTypes['transferContractOwnership'][0])
    {
        list($response) = $this->transferContractOwnershipWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, $contentType);
        return $response;
    }

    /**
     * Operation transferContractOwnershipWithHttpInfo
     *
     * Transfer contract ownership
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\TransferContractOwnershipRequest $transfer_contract_ownership_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferContractOwnership'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferContractOwnershipWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, string $contentType = self::contentTypes['transferContractOwnership'][0])
    {
        $request = $this->transferContractOwnershipRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferContractOwnershipAsync
     *
     * Transfer contract ownership
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\TransferContractOwnershipRequest $transfer_contract_ownership_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferContractOwnership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferContractOwnershipAsync($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, string $contentType = self::contentTypes['transferContractOwnership'][0])
    {
        return $this->transferContractOwnershipAsyncWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferContractOwnershipAsyncWithHttpInfo
     *
     * Transfer contract ownership
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\TransferContractOwnershipRequest $transfer_contract_ownership_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferContractOwnership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferContractOwnershipAsyncWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, string $contentType = self::contentTypes['transferContractOwnership'][0])
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->transferContractOwnershipRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferContractOwnership'
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\TransferContractOwnershipRequest $transfer_contract_ownership_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferContractOwnership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferContractOwnershipRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $transfer_contract_ownership_request, string $contentType = self::contentTypes['transferContractOwnership'][0])
    {

        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling transferContractOwnership'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling transferContractOwnership'
            );
        }

        // verify the required parameter 'x_wallet_decrypt_key' is set
        if ($x_wallet_decrypt_key === null || (is_array($x_wallet_decrypt_key) && count($x_wallet_decrypt_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_wallet_decrypt_key when calling transferContractOwnership'
            );
        }

        // verify the required parameter 'transfer_contract_ownership_request' is set
        if ($transfer_contract_ownership_request === null || (is_array($transfer_contract_ownership_request) && count($transfer_contract_ownership_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_contract_ownership_request when calling transferContractOwnership'
            );
        }


        $resourcePath = '/v1/contracts/{contractId}/owners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_wallet_decrypt_key !== null) {
            $headerParams['X-Wallet-Decrypt-Key'] = ObjectSerializer::toHeaderValue($x_wallet_decrypt_key);
        }

        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transfer_contract_ownership_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($transfer_contract_ownership_request));
            } else {
                $httpBody = $transfer_contract_ownership_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upgradeContractTrustedForwarder
     *
     * Upgrade contract trusted forwarder
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\UpgradeContractTrustedForwarderRequest $upgrade_contract_trusted_forwarder_request upgrade_contract_trusted_forwarder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upgradeContractTrustedForwarder'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function upgradeContractTrustedForwarder($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, string $contentType = self::contentTypes['upgradeContractTrustedForwarder'][0])
    {
        list($response) = $this->upgradeContractTrustedForwarderWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, $contentType);
        return $response;
    }

    /**
     * Operation upgradeContractTrustedForwarderWithHttpInfo
     *
     * Upgrade contract trusted forwarder
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\UpgradeContractTrustedForwarderRequest $upgrade_contract_trusted_forwarder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upgradeContractTrustedForwarder'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function upgradeContractTrustedForwarderWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, string $contentType = self::contentTypes['upgradeContractTrustedForwarder'][0])
    {
        $request = $this->upgradeContractTrustedForwarderRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upgradeContractTrustedForwarderAsync
     *
     * Upgrade contract trusted forwarder
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\UpgradeContractTrustedForwarderRequest $upgrade_contract_trusted_forwarder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upgradeContractTrustedForwarder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upgradeContractTrustedForwarderAsync($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, string $contentType = self::contentTypes['upgradeContractTrustedForwarder'][0])
    {
        return $this->upgradeContractTrustedForwarderAsyncWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation upgradeContractTrustedForwarderAsyncWithHttpInfo
     *
     * Upgrade contract trusted forwarder
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\UpgradeContractTrustedForwarderRequest $upgrade_contract_trusted_forwarder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upgradeContractTrustedForwarder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upgradeContractTrustedForwarderAsyncWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, string $contentType = self::contentTypes['upgradeContractTrustedForwarder'][0])
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->upgradeContractTrustedForwarderRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upgradeContractTrustedForwarder'
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\UpgradeContractTrustedForwarderRequest $upgrade_contract_trusted_forwarder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['upgradeContractTrustedForwarder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function upgradeContractTrustedForwarderRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $upgrade_contract_trusted_forwarder_request, string $contentType = self::contentTypes['upgradeContractTrustedForwarder'][0])
    {

        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling upgradeContractTrustedForwarder'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling upgradeContractTrustedForwarder'
            );
        }

        // verify the required parameter 'x_wallet_decrypt_key' is set
        if ($x_wallet_decrypt_key === null || (is_array($x_wallet_decrypt_key) && count($x_wallet_decrypt_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_wallet_decrypt_key when calling upgradeContractTrustedForwarder'
            );
        }

        // verify the required parameter 'upgrade_contract_trusted_forwarder_request' is set
        if ($upgrade_contract_trusted_forwarder_request === null || (is_array($upgrade_contract_trusted_forwarder_request) && count($upgrade_contract_trusted_forwarder_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upgrade_contract_trusted_forwarder_request when calling upgradeContractTrustedForwarder'
            );
        }


        $resourcePath = '/v1/contracts/{contractId}/forwarders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_wallet_decrypt_key !== null) {
            $headerParams['X-Wallet-Decrypt-Key'] = ObjectSerializer::toHeaderValue($x_wallet_decrypt_key);
        }

        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upgrade_contract_trusted_forwarder_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($upgrade_contract_trusted_forwarder_request));
            } else {
                $httpBody = $upgrade_contract_trusted_forwarder_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation writeContract
     *
     * Write contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\WriteContractRequest $write_contract_request write_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['writeContract'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function writeContract($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, string $contentType = self::contentTypes['writeContract'][0])
    {
        list($response) = $this->writeContractWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, $contentType);
        return $response;
    }

    /**
     * Operation writeContractWithHttpInfo
     *
     * Write contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\WriteContractRequest $write_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['writeContract'] to see the possible values for this operation
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function writeContractWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, string $contentType = self::contentTypes['writeContract'][0])
    {
        $request = $this->writeContractRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation writeContractAsync
     *
     * Write contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\WriteContractRequest $write_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['writeContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function writeContractAsync($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, string $contentType = self::contentTypes['writeContract'][0])
    {
        return $this->writeContractAsyncWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation writeContractAsyncWithHttpInfo
     *
     * Write contract data
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\WriteContractRequest $write_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['writeContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function writeContractAsyncWithHttpInfo($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, string $contentType = self::contentTypes['writeContract'][0])
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->writeContractRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'writeContract'
     *
     * @param  string $contract_id Any contract id within the MetaFab platform. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_wallet_decrypt_key The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\WriteContractRequest $write_contract_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['writeContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function writeContractRequest($contract_id, $x_authorization, $x_wallet_decrypt_key, $write_contract_request, string $contentType = self::contentTypes['writeContract'][0])
    {

        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling writeContract'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling writeContract'
            );
        }

        // verify the required parameter 'x_wallet_decrypt_key' is set
        if ($x_wallet_decrypt_key === null || (is_array($x_wallet_decrypt_key) && count($x_wallet_decrypt_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_wallet_decrypt_key when calling writeContract'
            );
        }

        // verify the required parameter 'write_contract_request' is set
        if ($write_contract_request === null || (is_array($write_contract_request) && count($write_contract_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $write_contract_request when calling writeContract'
            );
        }


        $resourcePath = '/v1/contracts/{contractId}/writes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_wallet_decrypt_key !== null) {
            $headerParams['X-Wallet-Decrypt-Key'] = ObjectSerializer::toHeaderValue($x_wallet_decrypt_key);
        }

        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contractId' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($write_contract_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($write_contract_request));
            } else {
                $httpBody = $write_contract_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
