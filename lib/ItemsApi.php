<?php
/**
 * ItemsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MetaFab\MetaFab;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MetaFab\ApiException;
use MetaFab\Configuration;
use MetaFab\HeaderSelector;
use MetaFab\ObjectSerializer;

/**
 * ItemsApi Class Doc Comment
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation batchMintCollectionItems
     *
     * Batch mint collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\BatchMintCollectionItemsRequest $batch_mint_collection_items_request batch_mint_collection_items_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function batchMintCollectionItems($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request)
    {
        list($response) = $this->batchMintCollectionItemsWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request);
        return $response;
    }

    /**
     * Operation batchMintCollectionItemsWithHttpInfo
     *
     * Batch mint collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\BatchMintCollectionItemsRequest $batch_mint_collection_items_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchMintCollectionItemsWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request)
    {
        $request = $this->batchMintCollectionItemsRequest($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchMintCollectionItemsAsync
     *
     * Batch mint collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\BatchMintCollectionItemsRequest $batch_mint_collection_items_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchMintCollectionItemsAsync($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request)
    {
        return $this->batchMintCollectionItemsAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchMintCollectionItemsAsyncWithHttpInfo
     *
     * Batch mint collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\BatchMintCollectionItemsRequest $batch_mint_collection_items_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchMintCollectionItemsAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->batchMintCollectionItemsRequest($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchMintCollectionItems'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\BatchMintCollectionItemsRequest $batch_mint_collection_items_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchMintCollectionItemsRequest($collection_id, $x_authorization, $x_password, $batch_mint_collection_items_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling batchMintCollectionItems'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling batchMintCollectionItems'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling batchMintCollectionItems'
            );
        }

        // verify the required parameter 'batch_mint_collection_items_request' is set
        if ($batch_mint_collection_items_request === null || (is_array($batch_mint_collection_items_request) && count($batch_mint_collection_items_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_mint_collection_items_request when calling batchMintCollectionItems'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/batchMints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_mint_collection_items_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_mint_collection_items_request));
            } else {
                $httpBody = $batch_mint_collection_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchTransferCollectionItems
     *
     * Batch transfer collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCollectionItemsRequest $batch_transfer_collection_items_request batch_transfer_collection_items_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function batchTransferCollectionItems($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request)
    {
        list($response) = $this->batchTransferCollectionItemsWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request);
        return $response;
    }

    /**
     * Operation batchTransferCollectionItemsWithHttpInfo
     *
     * Batch transfer collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCollectionItemsRequest $batch_transfer_collection_items_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchTransferCollectionItemsWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request)
    {
        $request = $this->batchTransferCollectionItemsRequest($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchTransferCollectionItemsAsync
     *
     * Batch transfer collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCollectionItemsRequest $batch_transfer_collection_items_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchTransferCollectionItemsAsync($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request)
    {
        return $this->batchTransferCollectionItemsAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchTransferCollectionItemsAsyncWithHttpInfo
     *
     * Batch transfer collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCollectionItemsRequest $batch_transfer_collection_items_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchTransferCollectionItemsAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->batchTransferCollectionItemsRequest($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchTransferCollectionItems'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCollectionItemsRequest $batch_transfer_collection_items_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchTransferCollectionItemsRequest($collection_id, $x_authorization, $x_password, $batch_transfer_collection_items_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling batchTransferCollectionItems'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling batchTransferCollectionItems'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling batchTransferCollectionItems'
            );
        }

        // verify the required parameter 'batch_transfer_collection_items_request' is set
        if ($batch_transfer_collection_items_request === null || (is_array($batch_transfer_collection_items_request) && count($batch_transfer_collection_items_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_transfer_collection_items_request when calling batchTransferCollectionItems'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/batchTransfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_transfer_collection_items_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_transfer_collection_items_request));
            } else {
                $httpBody = $batch_transfer_collection_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation burnCollectionItem
     *
     * Burn collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCollectionItemRequest $burn_collection_item_request burn_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function burnCollectionItem($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request)
    {
        list($response) = $this->burnCollectionItemWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request);
        return $response;
    }

    /**
     * Operation burnCollectionItemWithHttpInfo
     *
     * Burn collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCollectionItemRequest $burn_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function burnCollectionItemWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request)
    {
        $request = $this->burnCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation burnCollectionItemAsync
     *
     * Burn collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCollectionItemRequest $burn_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function burnCollectionItemAsync($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request)
    {
        return $this->burnCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation burnCollectionItemAsyncWithHttpInfo
     *
     * Burn collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCollectionItemRequest $burn_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function burnCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->burnCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'burnCollectionItem'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCollectionItemRequest $burn_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function burnCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $burn_collection_item_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling burnCollectionItem'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling burnCollectionItem'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling burnCollectionItem'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling burnCollectionItem'
            );
        }

        // verify the required parameter 'burn_collection_item_request' is set
        if ($burn_collection_item_request === null || (is_array($burn_collection_item_request) && count($burn_collection_item_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $burn_collection_item_request when calling burnCollectionItem'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}/burns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($burn_collection_item_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($burn_collection_item_request));
            } else {
                $httpBody = $burn_collection_item_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCollection
     *
     * Create collection
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionRequest $create_collection_request create_collection_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\CreateCollection200Response|string|string
     */
    public function createCollection($x_authorization, $x_password, $create_collection_request)
    {
        list($response) = $this->createCollectionWithHttpInfo($x_authorization, $x_password, $create_collection_request);
        return $response;
    }

    /**
     * Operation createCollectionWithHttpInfo
     *
     * Create collection
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionRequest $create_collection_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\CreateCollection200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCollectionWithHttpInfo($x_authorization, $x_password, $create_collection_request)
    {
        $request = $this->createCollectionRequest($x_authorization, $x_password, $create_collection_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\CreateCollection200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\CreateCollection200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\CreateCollection200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\CreateCollection200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\CreateCollection200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCollectionAsync
     *
     * Create collection
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionRequest $create_collection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsync($x_authorization, $x_password, $create_collection_request)
    {
        return $this->createCollectionAsyncWithHttpInfo($x_authorization, $x_password, $create_collection_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCollectionAsyncWithHttpInfo
     *
     * Create collection
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionRequest $create_collection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsyncWithHttpInfo($x_authorization, $x_password, $create_collection_request)
    {
        $returnType = '\MetaFab\Model\CreateCollection200Response';
        $request = $this->createCollectionRequest($x_authorization, $x_password, $create_collection_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCollection'
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionRequest $create_collection_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCollectionRequest($x_authorization, $x_password, $create_collection_request)
    {

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling createCollection'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling createCollection'
            );
        }

        // verify the required parameter 'create_collection_request' is set
        if ($create_collection_request === null || (is_array($create_collection_request) && count($create_collection_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_collection_request when calling createCollection'
            );
        }

        $resourcePath = '/v1/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_collection_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_collection_request));
            } else {
                $httpBody = $create_collection_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCollectionItem
     *
     * Create collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionItemRequest $create_collection_item_request create_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function createCollectionItem($collection_id, $x_authorization, $x_password, $create_collection_item_request)
    {
        list($response) = $this->createCollectionItemWithHttpInfo($collection_id, $x_authorization, $x_password, $create_collection_item_request);
        return $response;
    }

    /**
     * Operation createCollectionItemWithHttpInfo
     *
     * Create collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionItemRequest $create_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCollectionItemWithHttpInfo($collection_id, $x_authorization, $x_password, $create_collection_item_request)
    {
        $request = $this->createCollectionItemRequest($collection_id, $x_authorization, $x_password, $create_collection_item_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCollectionItemAsync
     *
     * Create collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionItemRequest $create_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionItemAsync($collection_id, $x_authorization, $x_password, $create_collection_item_request)
    {
        return $this->createCollectionItemAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $create_collection_item_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCollectionItemAsyncWithHttpInfo
     *
     * Create collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionItemRequest $create_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionItemAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $create_collection_item_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->createCollectionItemRequest($collection_id, $x_authorization, $x_password, $create_collection_item_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCollectionItem'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCollectionItemRequest $create_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCollectionItemRequest($collection_id, $x_authorization, $x_password, $create_collection_item_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling createCollectionItem'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling createCollectionItem'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling createCollectionItem'
            );
        }

        // verify the required parameter 'create_collection_item_request' is set
        if ($create_collection_item_request === null || (is_array($create_collection_item_request) && count($create_collection_item_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_collection_item_request when calling createCollectionItem'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_collection_item_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_collection_item_request));
            } else {
                $httpBody = $create_collection_item_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionApproval
     *
     * Get collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $operator_address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return float|string
     */
    public function getCollectionApproval($collection_id, $operator_address, $address = null, $wallet_id = null)
    {
        list($response) = $this->getCollectionApprovalWithHttpInfo($collection_id, $operator_address, $address, $wallet_id);
        return $response;
    }

    /**
     * Operation getCollectionApprovalWithHttpInfo
     *
     * Get collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $operator_address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of float|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionApprovalWithHttpInfo($collection_id, $operator_address, $address = null, $wallet_id = null)
    {
        $request = $this->getCollectionApprovalRequest($collection_id, $operator_address, $address, $wallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('float' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'float';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionApprovalAsync
     *
     * Get collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $operator_address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionApprovalAsync($collection_id, $operator_address, $address = null, $wallet_id = null)
    {
        return $this->getCollectionApprovalAsyncWithHttpInfo($collection_id, $operator_address, $address, $wallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionApprovalAsyncWithHttpInfo
     *
     * Get collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $operator_address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionApprovalAsyncWithHttpInfo($collection_id, $operator_address, $address = null, $wallet_id = null)
    {
        $returnType = 'float';
        $request = $this->getCollectionApprovalRequest($collection_id, $operator_address, $address, $wallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionApproval'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $operator_address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionApprovalRequest($collection_id, $operator_address, $address = null, $wallet_id = null)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionApproval'
            );
        }

        // verify the required parameter 'operator_address' is set
        if ($operator_address === null || (is_array($operator_address) && count($operator_address) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_address when calling getCollectionApproval'
            );
        }



        $resourcePath = '/v1/collections/{collectionId}/approvals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $operator_address,
            'operatorAddress', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_id,
            'walletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionItem
     *
     * Get collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]|string
     */
    public function getCollectionItem($collection_id, $collection_item_id)
    {
        list($response) = $this->getCollectionItemWithHttpInfo($collection_id, $collection_item_id);
        return $response;
    }

    /**
     * Operation getCollectionItemWithHttpInfo
     *
     * Get collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionItemWithHttpInfo($collection_id, $collection_item_id)
    {
        $request = $this->getCollectionItemRequest($collection_id, $collection_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionItemAsync
     *
     * Get collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemAsync($collection_id, $collection_item_id)
    {
        return $this->getCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionItemAsyncWithHttpInfo
     *
     * Get collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id)
    {
        $returnType = 'object[]';
        $request = $this->getCollectionItemRequest($collection_id, $collection_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionItem'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionItemRequest($collection_id, $collection_item_id)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionItem'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling getCollectionItem'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionItemBalance
     *
     * Get collection item balance
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return float|string
     */
    public function getCollectionItemBalance($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        list($response) = $this->getCollectionItemBalanceWithHttpInfo($collection_id, $collection_item_id, $address, $wallet_id);
        return $response;
    }

    /**
     * Operation getCollectionItemBalanceWithHttpInfo
     *
     * Get collection item balance
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of float|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionItemBalanceWithHttpInfo($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        $request = $this->getCollectionItemBalanceRequest($collection_id, $collection_item_id, $address, $wallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('float' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'float';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionItemBalanceAsync
     *
     * Get collection item balance
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemBalanceAsync($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        return $this->getCollectionItemBalanceAsyncWithHttpInfo($collection_id, $collection_item_id, $address, $wallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionItemBalanceAsyncWithHttpInfo
     *
     * Get collection item balance
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemBalanceAsyncWithHttpInfo($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        $returnType = 'float';
        $request = $this->getCollectionItemBalanceRequest($collection_id, $collection_item_id, $address, $wallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionItemBalance'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionItemBalanceRequest($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionItemBalance'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling getCollectionItemBalance'
            );
        }



        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_id,
            'walletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionItemBalances
     *
     * Get collection item balances
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,float>|string
     */
    public function getCollectionItemBalances($collection_id, $address = null, $wallet_id = null)
    {
        list($response) = $this->getCollectionItemBalancesWithHttpInfo($collection_id, $address, $wallet_id);
        return $response;
    }

    /**
     * Operation getCollectionItemBalancesWithHttpInfo
     *
     * Get collection item balances
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,float>|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionItemBalancesWithHttpInfo($collection_id, $address = null, $wallet_id = null)
    {
        $request = $this->getCollectionItemBalancesRequest($collection_id, $address, $wallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,float>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,float>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,float>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,float>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,float>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionItemBalancesAsync
     *
     * Get collection item balances
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemBalancesAsync($collection_id, $address = null, $wallet_id = null)
    {
        return $this->getCollectionItemBalancesAsyncWithHttpInfo($collection_id, $address, $wallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionItemBalancesAsyncWithHttpInfo
     *
     * Get collection item balances
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemBalancesAsyncWithHttpInfo($collection_id, $address = null, $wallet_id = null)
    {
        $returnType = 'array<string,float>';
        $request = $this->getCollectionItemBalancesRequest($collection_id, $address, $wallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionItemBalances'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionItemBalancesRequest($collection_id, $address = null, $wallet_id = null)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionItemBalances'
            );
        }



        $resourcePath = '/v1/collections/{collectionId}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_id,
            'walletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionItemSupplies
     *
     * Get collection item supplies
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,float>|string
     */
    public function getCollectionItemSupplies($collection_id)
    {
        list($response) = $this->getCollectionItemSuppliesWithHttpInfo($collection_id);
        return $response;
    }

    /**
     * Operation getCollectionItemSuppliesWithHttpInfo
     *
     * Get collection item supplies
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,float>|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionItemSuppliesWithHttpInfo($collection_id)
    {
        $request = $this->getCollectionItemSuppliesRequest($collection_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,float>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,float>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,float>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,float>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,float>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionItemSuppliesAsync
     *
     * Get collection item supplies
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemSuppliesAsync($collection_id)
    {
        return $this->getCollectionItemSuppliesAsyncWithHttpInfo($collection_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionItemSuppliesAsyncWithHttpInfo
     *
     * Get collection item supplies
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemSuppliesAsyncWithHttpInfo($collection_id)
    {
        $returnType = 'array<string,float>';
        $request = $this->getCollectionItemSuppliesRequest($collection_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionItemSupplies'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionItemSuppliesRequest($collection_id)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionItemSupplies'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/supplies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionItemSupply
     *
     * Get collection item supply
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return float|string
     */
    public function getCollectionItemSupply($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        list($response) = $this->getCollectionItemSupplyWithHttpInfo($collection_id, $collection_item_id, $address, $wallet_id);
        return $response;
    }

    /**
     * Operation getCollectionItemSupplyWithHttpInfo
     *
     * Get collection item supply
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of float|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionItemSupplyWithHttpInfo($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        $request = $this->getCollectionItemSupplyRequest($collection_id, $collection_item_id, $address, $wallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('float' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'float';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionItemSupplyAsync
     *
     * Get collection item supply
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemSupplyAsync($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        return $this->getCollectionItemSupplyAsyncWithHttpInfo($collection_id, $collection_item_id, $address, $wallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionItemSupplyAsyncWithHttpInfo
     *
     * Get collection item supply
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemSupplyAsyncWithHttpInfo($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {
        $returnType = 'float';
        $request = $this->getCollectionItemSupplyRequest($collection_id, $collection_item_id, $address, $wallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionItemSupply'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionItemSupplyRequest($collection_id, $collection_item_id, $address = null, $wallet_id = null)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionItemSupply'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling getCollectionItemSupply'
            );
        }



        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}/supplies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_id,
            'walletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionItemTimelock
     *
     * Get collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return float|string
     */
    public function getCollectionItemTimelock($collection_id, $collection_item_id)
    {
        list($response) = $this->getCollectionItemTimelockWithHttpInfo($collection_id, $collection_item_id);
        return $response;
    }

    /**
     * Operation getCollectionItemTimelockWithHttpInfo
     *
     * Get collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of float|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionItemTimelockWithHttpInfo($collection_id, $collection_item_id)
    {
        $request = $this->getCollectionItemTimelockRequest($collection_id, $collection_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('float' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'float';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionItemTimelockAsync
     *
     * Get collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemTimelockAsync($collection_id, $collection_item_id)
    {
        return $this->getCollectionItemTimelockAsyncWithHttpInfo($collection_id, $collection_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionItemTimelockAsyncWithHttpInfo
     *
     * Get collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemTimelockAsyncWithHttpInfo($collection_id, $collection_item_id)
    {
        $returnType = 'float';
        $request = $this->getCollectionItemTimelockRequest($collection_id, $collection_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionItemTimelock'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionItemTimelockRequest($collection_id, $collection_item_id)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionItemTimelock'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling getCollectionItemTimelock'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}/timelocks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollectionItems
     *
     * Get collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]|string
     */
    public function getCollectionItems($collection_id)
    {
        list($response) = $this->getCollectionItemsWithHttpInfo($collection_id);
        return $response;
    }

    /**
     * Operation getCollectionItemsWithHttpInfo
     *
     * Get collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionItemsWithHttpInfo($collection_id)
    {
        $request = $this->getCollectionItemsRequest($collection_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionItemsAsync
     *
     * Get collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemsAsync($collection_id)
    {
        return $this->getCollectionItemsAsyncWithHttpInfo($collection_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionItemsAsyncWithHttpInfo
     *
     * Get collection items
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionItemsAsyncWithHttpInfo($collection_id)
    {
        $returnType = 'object[]';
        $request = $this->getCollectionItemsRequest($collection_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollectionItems'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionItemsRequest($collection_id)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling getCollectionItems'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollections
     *
     * Get collections
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetCollections200ResponseInner[]|string
     */
    public function getCollections($x_game_key)
    {
        list($response) = $this->getCollectionsWithHttpInfo($x_game_key);
        return $response;
    }

    /**
     * Operation getCollectionsWithHttpInfo
     *
     * Get collections
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetCollections200ResponseInner[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionsWithHttpInfo($x_game_key)
    {
        $request = $this->getCollectionsRequest($x_game_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetCollections200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetCollections200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetCollections200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetCollections200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetCollections200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionsAsync
     *
     * Get collections
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionsAsync($x_game_key)
    {
        return $this->getCollectionsAsyncWithHttpInfo($x_game_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionsAsyncWithHttpInfo
     *
     * Get collections
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionsAsyncWithHttpInfo($x_game_key)
    {
        $returnType = '\MetaFab\Model\GetCollections200ResponseInner[]';
        $request = $this->getCollectionsRequest($x_game_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollections'
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionsRequest($x_game_key)
    {

        // verify the required parameter 'x_game_key' is set
        if ($x_game_key === null || (is_array($x_game_key) && count($x_game_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_game_key when calling getCollections'
            );
        }

        $resourcePath = '/v1/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_game_key !== null) {
            $headerParams['X-Game-Key'] = ObjectSerializer::toHeaderValue($x_game_key);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mintCollectionItem
     *
     * Mint collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCollectionItemRequest $mint_collection_item_request mint_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function mintCollectionItem($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request)
    {
        list($response) = $this->mintCollectionItemWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request);
        return $response;
    }

    /**
     * Operation mintCollectionItemWithHttpInfo
     *
     * Mint collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCollectionItemRequest $mint_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mintCollectionItemWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request)
    {
        $request = $this->mintCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mintCollectionItemAsync
     *
     * Mint collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCollectionItemRequest $mint_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mintCollectionItemAsync($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request)
    {
        return $this->mintCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mintCollectionItemAsyncWithHttpInfo
     *
     * Mint collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCollectionItemRequest $mint_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mintCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->mintCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mintCollectionItem'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCollectionItemRequest $mint_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mintCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $mint_collection_item_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling mintCollectionItem'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling mintCollectionItem'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling mintCollectionItem'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling mintCollectionItem'
            );
        }

        // verify the required parameter 'mint_collection_item_request' is set
        if ($mint_collection_item_request === null || (is_array($mint_collection_item_request) && count($mint_collection_item_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mint_collection_item_request when calling mintCollectionItem'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}/mints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($mint_collection_item_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mint_collection_item_request));
            } else {
                $httpBody = $mint_collection_item_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setCollectionApproval
     *
     * Set collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionApprovalRequest $set_collection_approval_request set_collection_approval_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function setCollectionApproval($collection_id, $x_authorization, $x_password, $set_collection_approval_request)
    {
        list($response) = $this->setCollectionApprovalWithHttpInfo($collection_id, $x_authorization, $x_password, $set_collection_approval_request);
        return $response;
    }

    /**
     * Operation setCollectionApprovalWithHttpInfo
     *
     * Set collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionApprovalRequest $set_collection_approval_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCollectionApprovalWithHttpInfo($collection_id, $x_authorization, $x_password, $set_collection_approval_request)
    {
        $request = $this->setCollectionApprovalRequest($collection_id, $x_authorization, $x_password, $set_collection_approval_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setCollectionApprovalAsync
     *
     * Set collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionApprovalRequest $set_collection_approval_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCollectionApprovalAsync($collection_id, $x_authorization, $x_password, $set_collection_approval_request)
    {
        return $this->setCollectionApprovalAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $set_collection_approval_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setCollectionApprovalAsyncWithHttpInfo
     *
     * Set collection approval
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionApprovalRequest $set_collection_approval_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCollectionApprovalAsyncWithHttpInfo($collection_id, $x_authorization, $x_password, $set_collection_approval_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->setCollectionApprovalRequest($collection_id, $x_authorization, $x_password, $set_collection_approval_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setCollectionApproval'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionApprovalRequest $set_collection_approval_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setCollectionApprovalRequest($collection_id, $x_authorization, $x_password, $set_collection_approval_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling setCollectionApproval'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling setCollectionApproval'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling setCollectionApproval'
            );
        }

        // verify the required parameter 'set_collection_approval_request' is set
        if ($set_collection_approval_request === null || (is_array($set_collection_approval_request) && count($set_collection_approval_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_collection_approval_request when calling setCollectionApproval'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/approvals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_collection_approval_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_collection_approval_request));
            } else {
                $httpBody = $set_collection_approval_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setCollectionItemTimelock
     *
     * Set collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionItemTimelockRequest $set_collection_item_timelock_request set_collection_item_timelock_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function setCollectionItemTimelock($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request)
    {
        list($response) = $this->setCollectionItemTimelockWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request);
        return $response;
    }

    /**
     * Operation setCollectionItemTimelockWithHttpInfo
     *
     * Set collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionItemTimelockRequest $set_collection_item_timelock_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCollectionItemTimelockWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request)
    {
        $request = $this->setCollectionItemTimelockRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setCollectionItemTimelockAsync
     *
     * Set collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionItemTimelockRequest $set_collection_item_timelock_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCollectionItemTimelockAsync($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request)
    {
        return $this->setCollectionItemTimelockAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setCollectionItemTimelockAsyncWithHttpInfo
     *
     * Set collection item timelock
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionItemTimelockRequest $set_collection_item_timelock_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCollectionItemTimelockAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->setCollectionItemTimelockRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setCollectionItemTimelock'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCollectionItemTimelockRequest $set_collection_item_timelock_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setCollectionItemTimelockRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $set_collection_item_timelock_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling setCollectionItemTimelock'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling setCollectionItemTimelock'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling setCollectionItemTimelock'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling setCollectionItemTimelock'
            );
        }

        // verify the required parameter 'set_collection_item_timelock_request' is set
        if ($set_collection_item_timelock_request === null || (is_array($set_collection_item_timelock_request) && count($set_collection_item_timelock_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_collection_item_timelock_request when calling setCollectionItemTimelock'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}/timelocks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_collection_item_timelock_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_collection_item_timelock_request));
            } else {
                $httpBody = $set_collection_item_timelock_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferCollectionItem
     *
     * Transfer collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCollectionItemRequest $transfer_collection_item_request transfer_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function transferCollectionItem($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request)
    {
        list($response) = $this->transferCollectionItemWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request);
        return $response;
    }

    /**
     * Operation transferCollectionItemWithHttpInfo
     *
     * Transfer collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCollectionItemRequest $transfer_collection_item_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferCollectionItemWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request)
    {
        $request = $this->transferCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferCollectionItemAsync
     *
     * Transfer collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCollectionItemRequest $transfer_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferCollectionItemAsync($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request)
    {
        return $this->transferCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferCollectionItemAsyncWithHttpInfo
     *
     * Transfer collection item
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCollectionItemRequest $transfer_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferCollectionItemAsyncWithHttpInfo($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->transferCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferCollectionItem'
     *
     * @param  string $collection_id Any collection id within the MetaFab ecosystem. (required)
     * @param  float $collection_item_id Any item id for the collection. Zero, or a positive integer. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCollectionItemRequest $transfer_collection_item_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferCollectionItemRequest($collection_id, $collection_item_id, $x_authorization, $x_password, $transfer_collection_item_request)
    {

        // verify the required parameter 'collection_id' is set
        if ($collection_id === null || (is_array($collection_id) && count($collection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_id when calling transferCollectionItem'
            );
        }

        // verify the required parameter 'collection_item_id' is set
        if ($collection_item_id === null || (is_array($collection_item_id) && count($collection_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_item_id when calling transferCollectionItem'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling transferCollectionItem'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling transferCollectionItem'
            );
        }

        // verify the required parameter 'transfer_collection_item_request' is set
        if ($transfer_collection_item_request === null || (is_array($transfer_collection_item_request) && count($transfer_collection_item_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_collection_item_request when calling transferCollectionItem'
            );
        }

        $resourcePath = '/v1/collections/{collectionId}/items/{collectionItemId}/transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($collection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionId' . '}',
                ObjectSerializer::toPathValue($collection_id),
                $resourcePath
            );
        }
        // path params
        if ($collection_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionItemId' . '}',
                ObjectSerializer::toPathValue($collection_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($transfer_collection_item_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($transfer_collection_item_request));
            } else {
                $httpBody = $transfer_collection_item_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
