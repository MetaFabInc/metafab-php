<?php
/**
 * CurrenciesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MetaFab\MetaFab;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MetaFab\ApiException;
use MetaFab\Configuration;
use MetaFab\HeaderSelector;
use MetaFab\ObjectSerializer;

/**
 * CurrenciesApi Class Doc Comment
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CurrenciesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation batchTransferCurrency
     *
     * Batch transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCurrencyRequest $batch_transfer_currency_request batch_transfer_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function batchTransferCurrency($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request)
    {
        list($response) = $this->batchTransferCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request);
        return $response;
    }

    /**
     * Operation batchTransferCurrencyWithHttpInfo
     *
     * Batch transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCurrencyRequest $batch_transfer_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchTransferCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request)
    {
        $request = $this->batchTransferCurrencyRequest($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation batchTransferCurrencyAsync
     *
     * Batch transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCurrencyRequest $batch_transfer_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchTransferCurrencyAsync($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request)
    {
        return $this->batchTransferCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchTransferCurrencyAsyncWithHttpInfo
     *
     * Batch transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCurrencyRequest $batch_transfer_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchTransferCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->batchTransferCurrencyRequest($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchTransferCurrency'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BatchTransferCurrencyRequest $batch_transfer_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchTransferCurrencyRequest($currency_id, $x_authorization, $x_password, $batch_transfer_currency_request)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling batchTransferCurrency'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling batchTransferCurrency'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling batchTransferCurrency'
            );
        }

        // verify the required parameter 'batch_transfer_currency_request' is set
        if ($batch_transfer_currency_request === null || (is_array($batch_transfer_currency_request) && count($batch_transfer_currency_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batch_transfer_currency_request when calling batchTransferCurrency'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/batchTransfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($batch_transfer_currency_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($batch_transfer_currency_request));
            } else {
                $httpBody = $batch_transfer_currency_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation burnCurrency
     *
     * Burn currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCurrencyRequest $burn_currency_request burn_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function burnCurrency($currency_id, $x_authorization, $x_password, $burn_currency_request)
    {
        list($response) = $this->burnCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $burn_currency_request);
        return $response;
    }

    /**
     * Operation burnCurrencyWithHttpInfo
     *
     * Burn currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCurrencyRequest $burn_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function burnCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $burn_currency_request)
    {
        $request = $this->burnCurrencyRequest($currency_id, $x_authorization, $x_password, $burn_currency_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation burnCurrencyAsync
     *
     * Burn currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCurrencyRequest $burn_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function burnCurrencyAsync($currency_id, $x_authorization, $x_password, $burn_currency_request)
    {
        return $this->burnCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $burn_currency_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation burnCurrencyAsyncWithHttpInfo
     *
     * Burn currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCurrencyRequest $burn_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function burnCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $burn_currency_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->burnCurrencyRequest($currency_id, $x_authorization, $x_password, $burn_currency_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'burnCurrency'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\BurnCurrencyRequest $burn_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function burnCurrencyRequest($currency_id, $x_authorization, $x_password, $burn_currency_request)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling burnCurrency'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling burnCurrency'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling burnCurrency'
            );
        }

        // verify the required parameter 'burn_currency_request' is set
        if ($burn_currency_request === null || (is_array($burn_currency_request) && count($burn_currency_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $burn_currency_request when calling burnCurrency'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/burns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($burn_currency_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($burn_currency_request));
            } else {
                $httpBody = $burn_currency_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCurrency
     *
     * Create currency
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCurrencyRequest $create_currency_request create_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\CreateCurrency200Response|string|string
     */
    public function createCurrency($x_authorization, $x_password, $create_currency_request)
    {
        list($response) = $this->createCurrencyWithHttpInfo($x_authorization, $x_password, $create_currency_request);
        return $response;
    }

    /**
     * Operation createCurrencyWithHttpInfo
     *
     * Create currency
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCurrencyRequest $create_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\CreateCurrency200Response|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCurrencyWithHttpInfo($x_authorization, $x_password, $create_currency_request)
    {
        $request = $this->createCurrencyRequest($x_authorization, $x_password, $create_currency_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\CreateCurrency200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\CreateCurrency200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\CreateCurrency200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\CreateCurrency200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\CreateCurrency200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCurrencyAsync
     *
     * Create currency
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCurrencyRequest $create_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCurrencyAsync($x_authorization, $x_password, $create_currency_request)
    {
        return $this->createCurrencyAsyncWithHttpInfo($x_authorization, $x_password, $create_currency_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCurrencyAsyncWithHttpInfo
     *
     * Create currency
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCurrencyRequest $create_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCurrencyAsyncWithHttpInfo($x_authorization, $x_password, $create_currency_request)
    {
        $returnType = '\MetaFab\Model\CreateCurrency200Response';
        $request = $this->createCurrencyRequest($x_authorization, $x_password, $create_currency_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCurrency'
     *
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\CreateCurrencyRequest $create_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCurrencyRequest($x_authorization, $x_password, $create_currency_request)
    {

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling createCurrency'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling createCurrency'
            );
        }

        // verify the required parameter 'create_currency_request' is set
        if ($create_currency_request === null || (is_array($create_currency_request) && count($create_currency_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_currency_request when calling createCurrency'
            );
        }

        $resourcePath = '/v1/currencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_currency_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_currency_request));
            } else {
                $httpBody = $create_currency_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrencies
     *
     * Get currencies
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetCurrencies200ResponseInner[]|string
     */
    public function getCurrencies($x_game_key)
    {
        list($response) = $this->getCurrenciesWithHttpInfo($x_game_key);
        return $response;
    }

    /**
     * Operation getCurrenciesWithHttpInfo
     *
     * Get currencies
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetCurrencies200ResponseInner[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrenciesWithHttpInfo($x_game_key)
    {
        $request = $this->getCurrenciesRequest($x_game_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetCurrencies200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetCurrencies200ResponseInner[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetCurrencies200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetCurrencies200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetCurrencies200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrenciesAsync
     *
     * Get currencies
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrenciesAsync($x_game_key)
    {
        return $this->getCurrenciesAsyncWithHttpInfo($x_game_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrenciesAsyncWithHttpInfo
     *
     * Get currencies
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrenciesAsyncWithHttpInfo($x_game_key)
    {
        $returnType = '\MetaFab\Model\GetCurrencies200ResponseInner[]';
        $request = $this->getCurrenciesRequest($x_game_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrencies'
     *
     * @param  string $x_game_key The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCurrenciesRequest($x_game_key)
    {

        // verify the required parameter 'x_game_key' is set
        if ($x_game_key === null || (is_array($x_game_key) && count($x_game_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_game_key when calling getCurrencies'
            );
        }

        $resourcePath = '/v1/currencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_game_key !== null) {
            $headerParams['X-Game-Key'] = ObjectSerializer::toHeaderValue($x_game_key);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrencyBalance
     *
     * Get currency balance
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return float|string
     */
    public function getCurrencyBalance($currency_id, $address = null, $wallet_id = null)
    {
        list($response) = $this->getCurrencyBalanceWithHttpInfo($currency_id, $address, $wallet_id);
        return $response;
    }

    /**
     * Operation getCurrencyBalanceWithHttpInfo
     *
     * Get currency balance
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of float|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrencyBalanceWithHttpInfo($currency_id, $address = null, $wallet_id = null)
    {
        $request = $this->getCurrencyBalanceRequest($currency_id, $address, $wallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('float' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('float' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'float', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'float';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrencyBalanceAsync
     *
     * Get currency balance
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyBalanceAsync($currency_id, $address = null, $wallet_id = null)
    {
        return $this->getCurrencyBalanceAsyncWithHttpInfo($currency_id, $address, $wallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrencyBalanceAsyncWithHttpInfo
     *
     * Get currency balance
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyBalanceAsyncWithHttpInfo($currency_id, $address = null, $wallet_id = null)
    {
        $returnType = 'float';
        $request = $this->getCurrencyBalanceRequest($currency_id, $address, $wallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrencyBalance'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCurrencyBalanceRequest($currency_id, $address = null, $wallet_id = null)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling getCurrencyBalance'
            );
        }



        $resourcePath = '/v1/currencies/{currencyId}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_id,
            'walletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrencyFees
     *
     * Get currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\GetCurrencyFees200Response|string
     */
    public function getCurrencyFees($currency_id)
    {
        list($response) = $this->getCurrencyFeesWithHttpInfo($currency_id);
        return $response;
    }

    /**
     * Operation getCurrencyFeesWithHttpInfo
     *
     * Get currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\GetCurrencyFees200Response|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrencyFeesWithHttpInfo($currency_id)
    {
        $request = $this->getCurrencyFeesRequest($currency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\GetCurrencyFees200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\GetCurrencyFees200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\GetCurrencyFees200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\GetCurrencyFees200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\GetCurrencyFees200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrencyFeesAsync
     *
     * Get currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyFeesAsync($currency_id)
    {
        return $this->getCurrencyFeesAsyncWithHttpInfo($currency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrencyFeesAsyncWithHttpInfo
     *
     * Get currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyFeesAsyncWithHttpInfo($currency_id)
    {
        $returnType = '\MetaFab\Model\GetCurrencyFees200Response';
        $request = $this->getCurrencyFeesRequest($currency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrencyFees'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCurrencyFeesRequest($currency_id)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling getCurrencyFees'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/fees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrencyRole
     *
     * Get currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool|string
     */
    public function getCurrencyRole($currency_id, $role, $address = null, $wallet_id = null)
    {
        list($response) = $this->getCurrencyRoleWithHttpInfo($currency_id, $role, $address, $wallet_id);
        return $response;
    }

    /**
     * Operation getCurrencyRoleWithHttpInfo
     *
     * Get currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrencyRoleWithHttpInfo($currency_id, $role, $address = null, $wallet_id = null)
    {
        $request = $this->getCurrencyRoleRequest($currency_id, $role, $address, $wallet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrencyRoleAsync
     *
     * Get currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyRoleAsync($currency_id, $role, $address = null, $wallet_id = null)
    {
        return $this->getCurrencyRoleAsyncWithHttpInfo($currency_id, $role, $address, $wallet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrencyRoleAsyncWithHttpInfo
     *
     * Get currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyRoleAsyncWithHttpInfo($currency_id, $role, $address = null, $wallet_id = null)
    {
        $returnType = 'bool';
        $request = $this->getCurrencyRoleRequest($currency_id, $role, $address, $wallet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrencyRole'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $role A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required)
     * @param  string $address A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     * @param  string $wallet_id Any wallet id within the MetaFab ecosystem. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCurrencyRoleRequest($currency_id, $role, $address = null, $wallet_id = null)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling getCurrencyRole'
            );
        }

        // verify the required parameter 'role' is set
        if ($role === null || (is_array($role) && count($role) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role when calling getCurrencyRole'
            );
        }



        $resourcePath = '/v1/currencies/{currencyId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role,
            'role', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $wallet_id,
            'walletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation grantCurrencyRole
     *
     * Grant currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\GrantCurrencyRoleRequest $grant_currency_role_request grant_currency_role_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function grantCurrencyRole($currency_id, $x_authorization, $x_password, $grant_currency_role_request)
    {
        list($response) = $this->grantCurrencyRoleWithHttpInfo($currency_id, $x_authorization, $x_password, $grant_currency_role_request);
        return $response;
    }

    /**
     * Operation grantCurrencyRoleWithHttpInfo
     *
     * Grant currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\GrantCurrencyRoleRequest $grant_currency_role_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function grantCurrencyRoleWithHttpInfo($currency_id, $x_authorization, $x_password, $grant_currency_role_request)
    {
        $request = $this->grantCurrencyRoleRequest($currency_id, $x_authorization, $x_password, $grant_currency_role_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation grantCurrencyRoleAsync
     *
     * Grant currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\GrantCurrencyRoleRequest $grant_currency_role_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function grantCurrencyRoleAsync($currency_id, $x_authorization, $x_password, $grant_currency_role_request)
    {
        return $this->grantCurrencyRoleAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $grant_currency_role_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation grantCurrencyRoleAsyncWithHttpInfo
     *
     * Grant currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\GrantCurrencyRoleRequest $grant_currency_role_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function grantCurrencyRoleAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $grant_currency_role_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->grantCurrencyRoleRequest($currency_id, $x_authorization, $x_password, $grant_currency_role_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'grantCurrencyRole'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\GrantCurrencyRoleRequest $grant_currency_role_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function grantCurrencyRoleRequest($currency_id, $x_authorization, $x_password, $grant_currency_role_request)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling grantCurrencyRole'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling grantCurrencyRole'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling grantCurrencyRole'
            );
        }

        // verify the required parameter 'grant_currency_role_request' is set
        if ($grant_currency_role_request === null || (is_array($grant_currency_role_request) && count($grant_currency_role_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_currency_role_request when calling grantCurrencyRole'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($grant_currency_role_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($grant_currency_role_request));
            } else {
                $httpBody = $grant_currency_role_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mintCurrency
     *
     * Mint currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCurrencyRequest $mint_currency_request mint_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function mintCurrency($currency_id, $x_authorization, $x_password, $mint_currency_request)
    {
        list($response) = $this->mintCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $mint_currency_request);
        return $response;
    }

    /**
     * Operation mintCurrencyWithHttpInfo
     *
     * Mint currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCurrencyRequest $mint_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function mintCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $mint_currency_request)
    {
        $request = $this->mintCurrencyRequest($currency_id, $x_authorization, $x_password, $mint_currency_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mintCurrencyAsync
     *
     * Mint currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCurrencyRequest $mint_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mintCurrencyAsync($currency_id, $x_authorization, $x_password, $mint_currency_request)
    {
        return $this->mintCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $mint_currency_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mintCurrencyAsyncWithHttpInfo
     *
     * Mint currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCurrencyRequest $mint_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mintCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $mint_currency_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->mintCurrencyRequest($currency_id, $x_authorization, $x_password, $mint_currency_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mintCurrency'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\MintCurrencyRequest $mint_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mintCurrencyRequest($currency_id, $x_authorization, $x_password, $mint_currency_request)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling mintCurrency'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling mintCurrency'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling mintCurrency'
            );
        }

        // verify the required parameter 'mint_currency_request' is set
        if ($mint_currency_request === null || (is_array($mint_currency_request) && count($mint_currency_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mint_currency_request when calling mintCurrency'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/mints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($mint_currency_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($mint_currency_request));
            } else {
                $httpBody = $mint_currency_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeCurrencyRole
     *
     * Revoke currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\RevokeCollectionRoleRequest $revoke_collection_role_request revoke_collection_role_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function revokeCurrencyRole($currency_id, $x_authorization, $x_password, $revoke_collection_role_request)
    {
        list($response) = $this->revokeCurrencyRoleWithHttpInfo($currency_id, $x_authorization, $x_password, $revoke_collection_role_request);
        return $response;
    }

    /**
     * Operation revokeCurrencyRoleWithHttpInfo
     *
     * Revoke currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\RevokeCollectionRoleRequest $revoke_collection_role_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeCurrencyRoleWithHttpInfo($currency_id, $x_authorization, $x_password, $revoke_collection_role_request)
    {
        $request = $this->revokeCurrencyRoleRequest($currency_id, $x_authorization, $x_password, $revoke_collection_role_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeCurrencyRoleAsync
     *
     * Revoke currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\RevokeCollectionRoleRequest $revoke_collection_role_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeCurrencyRoleAsync($currency_id, $x_authorization, $x_password, $revoke_collection_role_request)
    {
        return $this->revokeCurrencyRoleAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $revoke_collection_role_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeCurrencyRoleAsyncWithHttpInfo
     *
     * Revoke currency role
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\RevokeCollectionRoleRequest $revoke_collection_role_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeCurrencyRoleAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $revoke_collection_role_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->revokeCurrencyRoleRequest($currency_id, $x_authorization, $x_password, $revoke_collection_role_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeCurrencyRole'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\RevokeCollectionRoleRequest $revoke_collection_role_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeCurrencyRoleRequest($currency_id, $x_authorization, $x_password, $revoke_collection_role_request)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling revokeCurrencyRole'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling revokeCurrencyRole'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling revokeCurrencyRole'
            );
        }

        // verify the required parameter 'revoke_collection_role_request' is set
        if ($revoke_collection_role_request === null || (is_array($revoke_collection_role_request) && count($revoke_collection_role_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $revoke_collection_role_request when calling revokeCurrencyRole'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($revoke_collection_role_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($revoke_collection_role_request));
            } else {
                $httpBody = $revoke_collection_role_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setCurrencyFees
     *
     * Set currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCurrencyFeesRequest $set_currency_fees_request set_currency_fees_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function setCurrencyFees($currency_id, $x_authorization, $x_password, $set_currency_fees_request)
    {
        list($response) = $this->setCurrencyFeesWithHttpInfo($currency_id, $x_authorization, $x_password, $set_currency_fees_request);
        return $response;
    }

    /**
     * Operation setCurrencyFeesWithHttpInfo
     *
     * Set currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCurrencyFeesRequest $set_currency_fees_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCurrencyFeesWithHttpInfo($currency_id, $x_authorization, $x_password, $set_currency_fees_request)
    {
        $request = $this->setCurrencyFeesRequest($currency_id, $x_authorization, $x_password, $set_currency_fees_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setCurrencyFeesAsync
     *
     * Set currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCurrencyFeesRequest $set_currency_fees_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCurrencyFeesAsync($currency_id, $x_authorization, $x_password, $set_currency_fees_request)
    {
        return $this->setCurrencyFeesAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $set_currency_fees_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setCurrencyFeesAsyncWithHttpInfo
     *
     * Set currency fees
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCurrencyFeesRequest $set_currency_fees_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setCurrencyFeesAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $set_currency_fees_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->setCurrencyFeesRequest($currency_id, $x_authorization, $x_password, $set_currency_fees_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setCurrencyFees'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of the authenticating game. (required)
     * @param  string $x_password The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. (required)
     * @param  \MetaFab\Model\SetCurrencyFeesRequest $set_currency_fees_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setCurrencyFeesRequest($currency_id, $x_authorization, $x_password, $set_currency_fees_request)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling setCurrencyFees'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling setCurrencyFees'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling setCurrencyFees'
            );
        }

        // verify the required parameter 'set_currency_fees_request' is set
        if ($set_currency_fees_request === null || (is_array($set_currency_fees_request) && count($set_currency_fees_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_currency_fees_request when calling setCurrencyFees'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/fees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($set_currency_fees_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_currency_fees_request));
            } else {
                $httpBody = $set_currency_fees_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferCurrency
     *
     * Transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCurrencyRequest $transfer_currency_request transfer_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MetaFab\Model\TransactionModel|string|string
     */
    public function transferCurrency($currency_id, $x_authorization, $x_password, $transfer_currency_request)
    {
        list($response) = $this->transferCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $transfer_currency_request);
        return $response;
    }

    /**
     * Operation transferCurrencyWithHttpInfo
     *
     * Transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCurrencyRequest $transfer_currency_request (required)
     *
     * @throws \MetaFab\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MetaFab\Model\TransactionModel|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferCurrencyWithHttpInfo($currency_id, $x_authorization, $x_password, $transfer_currency_request)
    {
        $request = $this->transferCurrencyRequest($currency_id, $x_authorization, $x_password, $transfer_currency_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MetaFab\Model\TransactionModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MetaFab\Model\TransactionModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MetaFab\Model\TransactionModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MetaFab\Model\TransactionModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MetaFab\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferCurrencyAsync
     *
     * Transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCurrencyRequest $transfer_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferCurrencyAsync($currency_id, $x_authorization, $x_password, $transfer_currency_request)
    {
        return $this->transferCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $transfer_currency_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferCurrencyAsyncWithHttpInfo
     *
     * Transfer currency
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCurrencyRequest $transfer_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferCurrencyAsyncWithHttpInfo($currency_id, $x_authorization, $x_password, $transfer_currency_request)
    {
        $returnType = '\MetaFab\Model\TransactionModel';
        $request = $this->transferCurrencyRequest($currency_id, $x_authorization, $x_password, $transfer_currency_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferCurrency'
     *
     * @param  string $currency_id Any currency id within the MetaFab ecosystem. (required)
     * @param  string $x_authorization The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. (required)
     * @param  string $x_password The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. (required)
     * @param  \MetaFab\Model\TransferCurrencyRequest $transfer_currency_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferCurrencyRequest($currency_id, $x_authorization, $x_password, $transfer_currency_request)
    {

        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling transferCurrency'
            );
        }

        // verify the required parameter 'x_authorization' is set
        if ($x_authorization === null || (is_array($x_authorization) && count($x_authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_authorization when calling transferCurrency'
            );
        }

        // verify the required parameter 'x_password' is set
        if ($x_password === null || (is_array($x_password) && count($x_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_password when calling transferCurrency'
            );
        }

        // verify the required parameter 'transfer_currency_request' is set
        if ($transfer_currency_request === null || (is_array($transfer_currency_request) && count($transfer_currency_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_currency_request when calling transferCurrency'
            );
        }

        $resourcePath = '/v1/currencies/{currencyId}/transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_authorization !== null) {
            $headerParams['X-Authorization'] = ObjectSerializer::toHeaderValue($x_authorization);
        }
        // header params
        if ($x_password !== null) {
            $headerParams['X-Password'] = ObjectSerializer::toHeaderValue($x_password);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'currencyId' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($transfer_currency_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($transfer_currency_request));
            } else {
                $httpBody = $transfer_currency_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
