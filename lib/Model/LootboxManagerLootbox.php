<?php
/**
 * LootboxManagerLootbox
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MetaFab\Model;

use \ArrayAccess;
use \MetaFab\ObjectSerializer;

/**
 * LootboxManagerLootbox Class Doc Comment
 *
 * @category Class
 * @package  MetaFab
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LootboxManagerLootbox implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LootboxManagerLootbox';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'input_collection' => 'string',
        'input_collection_item_ids' => 'int[]',
        'input_collection_item_amounts' => 'int[]',
        'output_collection' => 'string',
        'output_collection_item_ids' => 'int[]',
        'output_collection_item_amounts' => 'int[]',
        'output_collection_item_weights' => 'int[]',
        'output_total_items' => 'int',
        'last_updated_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'input_collection' => null,
        'input_collection_item_ids' => null,
        'input_collection_item_amounts' => null,
        'output_collection' => null,
        'output_collection_item_ids' => null,
        'output_collection_item_amounts' => null,
        'output_collection_item_weights' => null,
        'output_total_items' => null,
        'last_updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'input_collection' => false,
		'input_collection_item_ids' => false,
		'input_collection_item_amounts' => false,
		'output_collection' => false,
		'output_collection_item_ids' => false,
		'output_collection_item_amounts' => false,
		'output_collection_item_weights' => false,
		'output_total_items' => false,
		'last_updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'input_collection' => 'inputCollection',
        'input_collection_item_ids' => 'inputCollectionItemIds',
        'input_collection_item_amounts' => 'inputCollectionItemAmounts',
        'output_collection' => 'outputCollection',
        'output_collection_item_ids' => 'outputCollectionItemIds',
        'output_collection_item_amounts' => 'outputCollectionItemAmounts',
        'output_collection_item_weights' => 'outputCollectionItemWeights',
        'output_total_items' => 'outputTotalItems',
        'last_updated_at' => 'lastUpdatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'input_collection' => 'setInputCollection',
        'input_collection_item_ids' => 'setInputCollectionItemIds',
        'input_collection_item_amounts' => 'setInputCollectionItemAmounts',
        'output_collection' => 'setOutputCollection',
        'output_collection_item_ids' => 'setOutputCollectionItemIds',
        'output_collection_item_amounts' => 'setOutputCollectionItemAmounts',
        'output_collection_item_weights' => 'setOutputCollectionItemWeights',
        'output_total_items' => 'setOutputTotalItems',
        'last_updated_at' => 'setLastUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'input_collection' => 'getInputCollection',
        'input_collection_item_ids' => 'getInputCollectionItemIds',
        'input_collection_item_amounts' => 'getInputCollectionItemAmounts',
        'output_collection' => 'getOutputCollection',
        'output_collection_item_ids' => 'getOutputCollectionItemIds',
        'output_collection_item_amounts' => 'getOutputCollectionItemAmounts',
        'output_collection_item_weights' => 'getOutputCollectionItemWeights',
        'output_total_items' => 'getOutputTotalItems',
        'last_updated_at' => 'getLastUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('input_collection', $data ?? [], null);
        $this->setIfExists('input_collection_item_ids', $data ?? [], null);
        $this->setIfExists('input_collection_item_amounts', $data ?? [], null);
        $this->setIfExists('output_collection', $data ?? [], null);
        $this->setIfExists('output_collection_item_ids', $data ?? [], null);
        $this->setIfExists('output_collection_item_amounts', $data ?? [], null);
        $this->setIfExists('output_collection_item_weights', $data ?? [], null);
        $this->setIfExists('output_total_items', $data ?? [], null);
        $this->setIfExists('last_updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The id of this lootbox.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets input_collection
     *
     * @return string|null
     */
    public function getInputCollection()
    {
        return $this->container['input_collection'];
    }

    /**
     * Sets input_collection
     *
     * @param string|null $input_collection The address of the ERC1155 or MetaFab game items contract for input items required by this lootbox.
     *
     * @return self
     */
    public function setInputCollection($input_collection)
    {

        if (is_null($input_collection)) {
            throw new \InvalidArgumentException('non-nullable input_collection cannot be null');
        }

        $this->container['input_collection'] = $input_collection;

        return $this;
    }

    /**
     * Gets input_collection_item_ids
     *
     * @return int[]|null
     */
    public function getInputCollectionItemIds()
    {
        return $this->container['input_collection_item_ids'];
    }

    /**
     * Sets input_collection_item_ids
     *
     * @param int[]|null $input_collection_item_ids An array of item ids from the input collection that are required for this lootbox.
     *
     * @return self
     */
    public function setInputCollectionItemIds($input_collection_item_ids)
    {

        if (is_null($input_collection_item_ids)) {
            throw new \InvalidArgumentException('non-nullable input_collection_item_ids cannot be null');
        }

        $this->container['input_collection_item_ids'] = $input_collection_item_ids;

        return $this;
    }

    /**
     * Gets input_collection_item_amounts
     *
     * @return int[]|null
     */
    public function getInputCollectionItemAmounts()
    {
        return $this->container['input_collection_item_amounts'];
    }

    /**
     * Sets input_collection_item_amounts
     *
     * @param int[]|null $input_collection_item_amounts An array of amounts for each item id for the input collection that are required to open this lootbox.
     *
     * @return self
     */
    public function setInputCollectionItemAmounts($input_collection_item_amounts)
    {

        if (is_null($input_collection_item_amounts)) {
            throw new \InvalidArgumentException('non-nullable input_collection_item_amounts cannot be null');
        }

        $this->container['input_collection_item_amounts'] = $input_collection_item_amounts;

        return $this;
    }

    /**
     * Gets output_collection
     *
     * @return string|null
     */
    public function getOutputCollection()
    {
        return $this->container['output_collection'];
    }

    /**
     * Sets output_collection
     *
     * @param string|null $output_collection The address of the ERC1155 of MetaFab game items contract for possible output items given by this lootbox.
     *
     * @return self
     */
    public function setOutputCollection($output_collection)
    {

        if (is_null($output_collection)) {
            throw new \InvalidArgumentException('non-nullable output_collection cannot be null');
        }

        $this->container['output_collection'] = $output_collection;

        return $this;
    }

    /**
     * Gets output_collection_item_ids
     *
     * @return int[]|null
     */
    public function getOutputCollectionItemIds()
    {
        return $this->container['output_collection_item_ids'];
    }

    /**
     * Sets output_collection_item_ids
     *
     * @param int[]|null $output_collection_item_ids An array of item ids from the output collection that are possibly given by this lootbox.
     *
     * @return self
     */
    public function setOutputCollectionItemIds($output_collection_item_ids)
    {

        if (is_null($output_collection_item_ids)) {
            throw new \InvalidArgumentException('non-nullable output_collection_item_ids cannot be null');
        }

        $this->container['output_collection_item_ids'] = $output_collection_item_ids;

        return $this;
    }

    /**
     * Gets output_collection_item_amounts
     *
     * @return int[]|null
     */
    public function getOutputCollectionItemAmounts()
    {
        return $this->container['output_collection_item_amounts'];
    }

    /**
     * Sets output_collection_item_amounts
     *
     * @param int[]|null $output_collection_item_amounts An array of amounts for each item id for the output collection that are possibly given by this lootbox.
     *
     * @return self
     */
    public function setOutputCollectionItemAmounts($output_collection_item_amounts)
    {

        if (is_null($output_collection_item_amounts)) {
            throw new \InvalidArgumentException('non-nullable output_collection_item_amounts cannot be null');
        }

        $this->container['output_collection_item_amounts'] = $output_collection_item_amounts;

        return $this;
    }

    /**
     * Gets output_collection_item_weights
     *
     * @return int[]|null
     */
    public function getOutputCollectionItemWeights()
    {
        return $this->container['output_collection_item_weights'];
    }

    /**
     * Sets output_collection_item_weights
     *
     * @param int[]|null $output_collection_item_weights An array of weights for each item id for the output collection that are possibly given by this lootbox.
     *
     * @return self
     */
    public function setOutputCollectionItemWeights($output_collection_item_weights)
    {

        if (is_null($output_collection_item_weights)) {
            throw new \InvalidArgumentException('non-nullable output_collection_item_weights cannot be null');
        }

        $this->container['output_collection_item_weights'] = $output_collection_item_weights;

        return $this;
    }

    /**
     * Gets output_total_items
     *
     * @return int|null
     */
    public function getOutputTotalItems()
    {
        return $this->container['output_total_items'];
    }

    /**
     * Sets output_total_items
     *
     * @param int|null $output_total_items The number of items randomly selected when this lootbox is opened.
     *
     * @return self
     */
    public function setOutputTotalItems($output_total_items)
    {

        if (is_null($output_total_items)) {
            throw new \InvalidArgumentException('non-nullable output_total_items cannot be null');
        }

        $this->container['output_total_items'] = $output_total_items;

        return $this;
    }

    /**
     * Gets last_updated_at
     *
     * @return int|null
     */
    public function getLastUpdatedAt()
    {
        return $this->container['last_updated_at'];
    }

    /**
     * Sets last_updated_at
     *
     * @param int|null $last_updated_at A unix timestamp in seconds that represents the last time this offer was set or updated.
     *
     * @return self
     */
    public function setLastUpdatedAt($last_updated_at)
    {

        if (is_null($last_updated_at)) {
            throw new \InvalidArgumentException('non-nullable last_updated_at cannot be null');
        }

        $this->container['last_updated_at'] = $last_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


